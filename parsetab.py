
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftPLUSMINUSleftEQNEQLTELTGTGTEleftORANDAND ARRAY ASSIGNMENT BEGIN CHAR COLON COMMA DD DO DOT ELSE END EQ FUNCTION GT GTE IDENTIFIER IF INTEGER LPAREN LPARENARR LT LTE MINUS NEQ OF OR PLUS PROGRAM REAL RPAREN RPARENARR SCHAR SEMICOLON SINTEGER SREAL SSTRING STRING THEN TYPE VAR WHILE\n    empty :\n    \n    program : program_heading type_definition_part variable_declaration_part function_declaration_part compound_statement_dot\n    \n    program_heading : PROGRAM identifier SEMICOLON\n    \n    declaration_part : type_definition_part variable_declaration_part function_declaration_part\n    \n    block :  declaration_part statement_part\n    \n    type_definition_part : TYPE type_definition_list\n                            | empty\n    \n    type_definition_list : type_definition\n                        | type_definition type_definition_list\n    \n    variable_declaration_part : VAR variable_declaration_list\n                                | empty\n    \n    function_declaration_part : function_declaration function_declaration_part\n                                | empty\n     function_declaration : function_heading SEMICOLON block function_heading : FUNCTION identifier LPAREN parameters RPAREN COLON simple_type_name parameters : names_list COLON simple_type_name\n                    | names_list COLON simple_type_name SEMICOLON parameters names_list : identifier\n                    | identifier COMMA names_list\n    \n    type_definition : identifier EQ ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON\n\n    \n    statement_part : compound_statement\n                    | assignment_list\n                    | while_statement_list\n                    | if_else_statement_list\n                    | empty\n     while_statement_list : while_statement statement_part  if_else_statement_list : if_else_statement statement_part \n    single_statement_part : assignment\n                    | while_statement\n                    | if_else_statement\n                    | empty\n    \n    while_statement : WHILE expression DO single_statement_part\n                    | WHILE expression DO BEGIN statement_part END SEMICOLON\n     then_statement : single_statement_part\n                        | BEGIN statement_part END SEMICOLON single_statement_part_else : assignment_else\n                                    | while_statement\n                                    | if_else_statement\n                                    | empty\n                                     assignment_else :  identifier ASSIGNMENT expression\n                        | identifier LPARENARR integer RPARENARR ASSIGNMENT expression  else_statement : single_statement_part_else\n                        | BEGIN statement_part END  \n    if_else_statement : IF expression THEN then_statement\n                        | IF expression THEN else_statement ELSE then_statement\n     compound_statement : BEGIN statement_part END SEMICOLON\n                              compound_statement_dot : BEGIN statement_part END DOT\n                             \n     assignment_list : assignment statement_part\n     assignment : identifier ASSIGNMENT expression SEMICOLON\n                     | identifier LPARENARR integer RPARENARR ASSIGNMENT expression SEMICOLON\n                  expression : term\n                    | expression sign term\n                    | expression and_or expression and_or : AND\n                | OR sign : PLUS\n            | MINUS\n            | EQ\n            | NEQ\n            | GT\n            | LT\n            | GTE\n            | LTE term : integer\n            | real\n            | char\n            | string\n            | function_call\n            | identifier\n     integer : INTEGER real : REALstring : STRING char : CHAR function_call : identifier LPAREN identifier_list RPAREN\n    variable_declaration_list : variable_declaration\n                                | variable_declaration variable_declaration_list\n\n    \n    variable_declaration : identifier_list COLON simple_type_name SEMICOLON\n                        | identifier_list COLON SSTRING SEMICOLON\n                        | identifier COLON simple_type_name SEMICOLON\n                        | identifier COLON SSTRING SEMICOLON\n                        | identifier COLON identifier SEMICOLON\n                        | identifier COLON ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON\n    \n    identifier_list : identifier COMMA identifier_list\n                    | identifier\n     simple_type_name : SSTRING\n                        | SCHAR\n                        | SREAL\n                        | SINTEGER\n                         identifier : IDENTIFIER '
    
_lr_action_items = {'PROGRAM':([0,],[3,]),'$end':([1,27,99,],[0,-2,-47,]),'TYPE':([2,15,30,],[5,-3,5,]),'VAR':([2,4,6,12,13,15,25,30,52,182,],[-1,10,-7,-6,-8,-3,-9,-1,10,-20,]),'FUNCTION':([2,4,6,9,11,12,13,15,17,18,21,22,25,29,30,32,39,40,41,42,43,44,45,46,50,51,52,68,69,70,86,87,91,92,93,94,95,102,116,117,123,124,126,128,129,130,131,135,137,140,141,142,154,164,172,173,175,182,184,],[-1,-1,-7,20,-11,-6,-8,-3,20,-13,-10,-75,-9,-12,-1,-76,-21,-22,-23,-24,-25,-1,-1,-1,-14,-1,-1,-48,-26,-27,-5,20,-77,-78,-81,-79,-80,-1,-1,-4,-46,-49,-32,-28,-29,-30,-31,-44,-34,-29,-30,-31,-1,-45,-50,-33,-35,-20,-82,]),'BEGIN':([2,4,6,9,11,12,13,15,16,17,18,21,22,25,28,29,30,32,37,39,40,41,42,43,44,45,46,50,51,52,68,69,70,86,87,91,92,93,94,95,102,116,117,123,124,126,127,128,129,130,131,135,137,138,140,141,142,154,164,165,172,173,175,182,184,],[-1,-1,-7,-1,-11,-6,-8,-3,28,-1,-13,-10,-75,-9,37,-12,-1,-76,37,-21,-22,-23,-24,-25,37,37,37,-14,37,-1,-48,-26,-27,-5,-1,-77,-78,-81,-79,-80,127,138,-4,-46,-49,-32,37,-28,-29,-30,-31,-44,-34,37,-29,-30,-31,165,-45,37,-50,-33,-35,-20,-82,]),'IDENTIFIER':([3,5,6,10,11,12,13,17,18,20,21,22,25,28,29,30,32,34,35,37,39,40,41,42,43,44,45,46,48,49,50,51,52,53,68,69,70,71,86,87,91,92,93,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,124,126,127,128,129,130,131,135,137,138,140,141,142,151,154,156,159,164,165,172,173,175,180,182,184,],[8,8,-7,8,-11,-6,8,-1,-13,8,-10,8,-9,8,-12,-1,-76,8,8,8,-21,-22,-23,-24,-25,8,8,8,8,8,-14,8,-1,8,-48,-26,-27,8,-5,-1,-77,-78,-81,-79,-80,8,8,8,-56,-57,-58,-59,-60,-61,-62,-63,-54,-55,8,8,-4,8,-46,-49,-32,8,-28,-29,-30,-31,-44,-34,8,-29,-30,-31,8,8,8,8,-45,8,-50,-33,-35,8,-20,-82,]),'WHILE':([6,11,12,13,17,18,21,22,25,28,29,30,32,37,39,40,41,42,43,44,45,46,50,51,52,68,69,70,86,87,91,92,93,94,95,102,116,117,123,124,126,127,128,129,130,131,135,137,138,140,141,142,154,164,165,172,173,175,182,184,],[-7,-11,-6,-8,-1,-13,-10,-75,-9,48,-12,-1,-76,48,-21,-22,-23,-24,-25,48,48,48,-14,48,-1,-48,-26,-27,-5,-1,-77,-78,-81,-79,-80,48,48,-4,-46,-49,-32,48,-28,-29,-30,-31,-44,-34,48,-29,-30,-31,48,-45,48,-50,-33,-35,-20,-82,]),'IF':([6,11,12,13,17,18,21,22,25,28,29,30,32,37,39,40,41,42,43,44,45,46,50,51,52,68,69,70,86,87,91,92,93,94,95,102,116,117,123,124,126,127,128,129,130,131,135,137,138,140,141,142,154,164,165,172,173,175,182,184,],[-7,-11,-6,-8,-1,-13,-10,-75,-9,49,-12,-1,-76,49,-21,-22,-23,-24,-25,49,49,49,-14,49,-1,-48,-26,-27,-5,-1,-77,-78,-81,-79,-80,49,49,-4,-46,-49,-32,49,-28,-29,-30,-31,-44,-34,49,-29,-30,-31,49,-45,49,-50,-33,-35,-20,-82,]),'SEMICOLON':([7,8,19,54,55,56,57,58,59,60,61,74,75,76,77,78,79,80,81,82,83,84,98,100,132,133,147,148,153,158,162,163,166,167,178,179,181,183,],[15,-89,30,91,92,-86,-87,-88,93,94,95,-51,-64,-65,-66,-67,-68,-69,-70,-71,-73,-72,123,124,-52,-53,159,-85,-74,-15,172,173,175,124,182,175,184,172,]),'EQ':([8,14,73,74,75,76,77,78,79,80,81,82,83,84,85,100,132,133,153,162,167,183,],[-89,26,107,-51,-64,-65,-66,-67,-68,-69,-70,-71,-73,-72,107,107,-52,107,-74,107,107,107,]),'COLON':([8,23,24,63,64,88,90,119,145,],[-89,33,34,-84,-83,-18,120,146,-19,]),'COMMA':([8,24,63,88,],[-89,35,35,118,]),'LPAREN':([8,31,80,],[-89,53,115,]),'ASSIGNMENT':([8,47,125,144,176,],[-89,71,151,156,180,]),'LPARENARR':([8,36,47,62,144,],[-89,65,72,96,157,]),'RPAREN':([8,56,57,58,63,64,89,134,147,148,169,],[-89,-86,-87,-88,-84,-83,119,153,-16,-85,-17,]),'DO':([8,73,74,75,76,77,78,79,80,81,82,83,84,132,133,153,],[-89,102,-51,-64,-65,-66,-67,-68,-69,-70,-71,-73,-72,-52,-53,-74,]),'PLUS':([8,73,74,75,76,77,78,79,80,81,82,83,84,85,100,132,133,153,162,167,183,],[-89,105,-51,-64,-65,-66,-67,-68,-69,-70,-71,-73,-72,105,105,-52,105,-74,105,105,105,]),'MINUS':([8,73,74,75,76,77,78,79,80,81,82,83,84,85,100,132,133,153,162,167,183,],[-89,106,-51,-64,-65,-66,-67,-68,-69,-70,-71,-73,-72,106,106,-52,106,-74,106,106,106,]),'NEQ':([8,73,74,75,76,77,78,79,80,81,82,83,84,85,100,132,133,153,162,167,183,],[-89,108,-51,-64,-65,-66,-67,-68,-69,-70,-71,-73,-72,108,108,-52,108,-74,108,108,108,]),'GT':([8,73,74,75,76,77,78,79,80,81,82,83,84,85,100,132,133,153,162,167,183,],[-89,109,-51,-64,-65,-66,-67,-68,-69,-70,-71,-73,-72,109,109,-52,109,-74,109,109,109,]),'LT':([8,73,74,75,76,77,78,79,80,81,82,83,84,85,100,132,133,153,162,167,183,],[-89,110,-51,-64,-65,-66,-67,-68,-69,-70,-71,-73,-72,110,110,-52,110,-74,110,110,110,]),'GTE':([8,73,74,75,76,77,78,79,80,81,82,83,84,85,100,132,133,153,162,167,183,],[-89,111,-51,-64,-65,-66,-67,-68,-69,-70,-71,-73,-72,111,111,-52,111,-74,111,111,111,]),'LTE':([8,73,74,75,76,77,78,79,80,81,82,83,84,85,100,132,133,153,162,167,183,],[-89,112,-51,-64,-65,-66,-67,-68,-69,-70,-71,-73,-72,112,112,-52,112,-74,112,112,112,]),'AND':([8,73,74,75,76,77,78,79,80,81,82,83,84,85,100,132,133,153,162,167,183,],[-89,113,-51,-64,-65,-66,-67,-68,-69,-70,-71,-73,-72,113,113,-52,113,-74,113,113,113,]),'OR':([8,73,74,75,76,77,78,79,80,81,82,83,84,85,100,132,133,153,162,167,183,],[-89,114,-51,-64,-65,-66,-67,-68,-69,-70,-71,-73,-72,114,114,-52,114,-74,114,114,114,]),'THEN':([8,74,75,76,77,78,79,80,81,82,83,84,85,132,133,153,],[-89,-51,-64,-65,-66,-67,-68,-69,-70,-71,-73,-72,116,-52,-53,-74,]),'ELSE':([8,74,75,76,77,78,79,80,81,82,83,84,102,116,124,126,128,129,130,131,132,133,135,136,137,139,140,141,142,143,153,154,164,166,167,172,173,175,183,],[-89,-51,-64,-65,-66,-67,-68,-69,-70,-71,-73,-72,-1,-1,-49,-32,-28,-29,-30,-31,-52,-53,-44,154,-34,-42,-29,-30,-31,-36,-74,-1,-45,-43,-40,-50,-33,-35,-41,]),'ARRAY':([26,34,],[36,62,]),'END':([28,37,38,39,40,41,42,43,44,45,46,66,68,69,70,102,116,123,124,126,127,128,129,130,131,135,137,138,140,141,142,152,154,155,164,165,172,173,174,175,],[-1,-1,67,-21,-22,-23,-24,-25,-1,-1,-1,98,-48,-26,-27,-1,-1,-46,-49,-32,-1,-28,-29,-30,-31,-44,-34,-1,-29,-30,-31,163,-1,166,-45,-1,-50,-33,179,-35,]),'SSTRING':([33,34,120,146,171,177,],[55,61,148,148,148,148,]),'SCHAR':([33,34,120,146,171,177,],[56,56,56,56,56,56,]),'SREAL':([33,34,120,146,171,177,],[57,57,57,57,57,57,]),'SINTEGER':([33,34,120,146,171,177,],[58,58,58,58,58,58,]),'INTEGER':([48,49,65,71,72,96,103,104,105,106,107,108,109,110,111,112,113,114,122,149,151,156,157,180,],[81,81,97,81,81,121,81,81,-56,-57,-58,-59,-60,-61,-62,-63,-54,-55,150,160,81,81,81,81,]),'REAL':([48,49,71,103,104,105,106,107,108,109,110,111,112,113,114,151,156,180,],[82,82,82,82,82,-56,-57,-58,-59,-60,-61,-62,-63,-54,-55,82,82,82,]),'CHAR':([48,49,71,103,104,105,106,107,108,109,110,111,112,113,114,151,156,180,],[83,83,83,83,83,-56,-57,-58,-59,-60,-61,-62,-63,-54,-55,83,83,83,]),'STRING':([48,49,71,103,104,105,106,107,108,109,110,111,112,113,114,151,156,180,],[84,84,84,84,84,-56,-57,-58,-59,-60,-61,-62,-63,-54,-55,84,84,84,]),'DOT':([67,],[99,]),'RPARENARR':([81,101,150,160,168,],[-70,125,161,170,176,]),'DD':([97,121,],[122,149,]),'OF':([161,170,],[171,177,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_heading':([0,],[2,]),'type_definition_part':([2,30,],[4,52,]),'empty':([2,4,9,17,28,30,37,44,45,46,51,52,87,102,116,127,138,154,165,],[6,11,18,18,43,6,43,43,43,43,43,11,18,131,142,43,43,131,43,]),'identifier':([3,5,10,13,20,22,28,34,35,37,44,45,46,48,49,51,53,71,102,103,104,115,116,118,127,138,151,154,156,159,165,180,],[7,14,24,14,31,24,47,59,63,47,47,47,47,80,80,47,88,80,47,80,80,63,144,88,47,47,80,47,80,88,47,80,]),'variable_declaration_part':([4,52,],[9,87,]),'type_definition_list':([5,13,],[12,25,]),'type_definition':([5,13,],[13,13,]),'function_declaration_part':([9,17,87,],[16,29,117,]),'function_declaration':([9,17,87,],[17,17,17,]),'function_heading':([9,17,87,],[19,19,19,]),'variable_declaration_list':([10,22,],[21,32,]),'variable_declaration':([10,22,],[22,22,]),'identifier_list':([10,22,35,115,],[23,23,64,134,]),'compound_statement_dot':([16,],[27,]),'statement_part':([28,37,44,45,46,51,127,138,165,],[38,66,68,69,70,86,152,155,174,]),'compound_statement':([28,37,44,45,46,51,127,138,165,],[39,39,39,39,39,39,39,39,39,]),'assignment_list':([28,37,44,45,46,51,127,138,165,],[40,40,40,40,40,40,40,40,40,]),'while_statement_list':([28,37,44,45,46,51,127,138,165,],[41,41,41,41,41,41,41,41,41,]),'if_else_statement_list':([28,37,44,45,46,51,127,138,165,],[42,42,42,42,42,42,42,42,42,]),'assignment':([28,37,44,45,46,51,102,116,127,138,154,165,],[44,44,44,44,44,44,128,128,44,44,128,44,]),'while_statement':([28,37,44,45,46,51,102,116,127,138,154,165,],[45,45,45,45,45,45,129,140,45,45,129,45,]),'if_else_statement':([28,37,44,45,46,51,102,116,127,138,154,165,],[46,46,46,46,46,46,130,141,46,46,130,46,]),'block':([30,],[50,]),'declaration_part':([30,],[51,]),'simple_type_name':([33,34,120,146,171,177,],[54,60,147,158,178,181,]),'expression':([48,49,71,104,151,156,180,],[73,85,100,133,162,167,183,]),'term':([48,49,71,103,104,151,156,180,],[74,74,74,132,74,74,74,74,]),'integer':([48,49,71,72,103,104,151,156,157,180,],[75,75,75,101,75,75,75,75,168,75,]),'real':([48,49,71,103,104,151,156,180,],[76,76,76,76,76,76,76,76,]),'char':([48,49,71,103,104,151,156,180,],[77,77,77,77,77,77,77,77,]),'string':([48,49,71,103,104,151,156,180,],[78,78,78,78,78,78,78,78,]),'function_call':([48,49,71,103,104,151,156,180,],[79,79,79,79,79,79,79,79,]),'parameters':([53,159,],[89,169,]),'names_list':([53,118,159,],[90,145,90,]),'sign':([73,85,100,133,162,167,183,],[103,103,103,103,103,103,103,]),'and_or':([73,85,100,133,162,167,183,],[104,104,104,104,104,104,104,]),'single_statement_part':([102,116,154,],[126,137,137,]),'then_statement':([116,154,],[135,164,]),'else_statement':([116,],[136,]),'single_statement_part_else':([116,],[139,]),'assignment_else':([116,],[143,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',13),
  ('program -> program_heading type_definition_part variable_declaration_part function_declaration_part compound_statement_dot','program',5,'p_program','grammar.py',20),
  ('program_heading -> PROGRAM identifier SEMICOLON','program_heading',3,'p_program_heading','grammar.py',27),
  ('declaration_part -> type_definition_part variable_declaration_part function_declaration_part','declaration_part',3,'p_declaration_part','grammar.py',34),
  ('block -> declaration_part statement_part','block',2,'p_block','grammar.py',41),
  ('type_definition_part -> TYPE type_definition_list','type_definition_part',2,'p_type_definition_part','grammar.py',48),
  ('type_definition_part -> empty','type_definition_part',1,'p_type_definition_part','grammar.py',49),
  ('type_definition_list -> type_definition','type_definition_list',1,'p_type_definition_list','grammar.py',59),
  ('type_definition_list -> type_definition type_definition_list','type_definition_list',2,'p_type_definition_list','grammar.py',60),
  ('variable_declaration_part -> VAR variable_declaration_list','variable_declaration_part',2,'p_variable_declaration_part','grammar.py',71),
  ('variable_declaration_part -> empty','variable_declaration_part',1,'p_variable_declaration_part','grammar.py',72),
  ('function_declaration_part -> function_declaration function_declaration_part','function_declaration_part',2,'p_function_declaration_part','grammar.py',82),
  ('function_declaration_part -> empty','function_declaration_part',1,'p_function_declaration_part','grammar.py',83),
  ('function_declaration -> function_heading SEMICOLON block','function_declaration',3,'p_function_declaration','grammar.py',92),
  ('function_heading -> FUNCTION identifier LPAREN parameters RPAREN COLON simple_type_name','function_heading',7,'p_function_heading','grammar.py',98),
  ('parameters -> names_list COLON simple_type_name','parameters',3,'p_parameters','grammar.py',103),
  ('parameters -> names_list COLON simple_type_name SEMICOLON parameters','parameters',5,'p_parameters','grammar.py',104),
  ('names_list -> identifier','names_list',1,'p_names_list','grammar.py',112),
  ('names_list -> identifier COMMA names_list','names_list',3,'p_names_list','grammar.py',113),
  ('type_definition -> identifier EQ ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON','type_definition',11,'p_type_definition','grammar.py',123),
  ('statement_part -> compound_statement','statement_part',1,'p_statement_part','grammar.py',132),
  ('statement_part -> assignment_list','statement_part',1,'p_statement_part','grammar.py',133),
  ('statement_part -> while_statement_list','statement_part',1,'p_statement_part','grammar.py',134),
  ('statement_part -> if_else_statement_list','statement_part',1,'p_statement_part','grammar.py',135),
  ('statement_part -> empty','statement_part',1,'p_statement_part','grammar.py',136),
  ('while_statement_list -> while_statement statement_part','while_statement_list',2,'p_while_statement_list','grammar.py',143),
  ('if_else_statement_list -> if_else_statement statement_part','if_else_statement_list',2,'p_if_else_statement_list','grammar.py',148),
  ('single_statement_part -> assignment','single_statement_part',1,'p_single_statement_part','grammar.py',154),
  ('single_statement_part -> while_statement','single_statement_part',1,'p_single_statement_part','grammar.py',155),
  ('single_statement_part -> if_else_statement','single_statement_part',1,'p_single_statement_part','grammar.py',156),
  ('single_statement_part -> empty','single_statement_part',1,'p_single_statement_part','grammar.py',157),
  ('while_statement -> WHILE expression DO single_statement_part','while_statement',4,'p_while_statement','grammar.py',165),
  ('while_statement -> WHILE expression DO BEGIN statement_part END SEMICOLON','while_statement',7,'p_while_statement','grammar.py',166),
  ('then_statement -> single_statement_part','then_statement',1,'p_then_statement','grammar.py',175),
  ('then_statement -> BEGIN statement_part END SEMICOLON','then_statement',4,'p_then_statement','grammar.py',176),
  ('single_statement_part_else -> assignment_else','single_statement_part_else',1,'p_single_statement_part_else','grammar.py',184),
  ('single_statement_part_else -> while_statement','single_statement_part_else',1,'p_single_statement_part_else','grammar.py',185),
  ('single_statement_part_else -> if_else_statement','single_statement_part_else',1,'p_single_statement_part_else','grammar.py',186),
  ('single_statement_part_else -> empty','single_statement_part_else',1,'p_single_statement_part_else','grammar.py',187),
  ('assignment_else -> identifier ASSIGNMENT expression','assignment_else',3,'p_assignment_else','grammar.py',192),
  ('assignment_else -> identifier LPARENARR integer RPARENARR ASSIGNMENT expression','assignment_else',6,'p_assignment_else','grammar.py',193),
  ('else_statement -> single_statement_part_else','else_statement',1,'p_else_statement','grammar.py',201),
  ('else_statement -> BEGIN statement_part END','else_statement',3,'p_else_statement','grammar.py',202),
  ('if_else_statement -> IF expression THEN then_statement','if_else_statement',4,'p_if_else_statement','grammar.py',212),
  ('if_else_statement -> IF expression THEN else_statement ELSE then_statement','if_else_statement',6,'p_if_else_statement','grammar.py',213),
  ('compound_statement -> BEGIN statement_part END SEMICOLON','compound_statement',4,'p_compound_statement','grammar.py',223),
  ('compound_statement_dot -> BEGIN statement_part END DOT','compound_statement_dot',4,'p_compound_statement_dot','grammar.py',229),
  ('assignment_list -> assignment statement_part','assignment_list',2,'p_assignment_list','grammar.py',236),
  ('assignment -> identifier ASSIGNMENT expression SEMICOLON','assignment',4,'p_assignment','grammar.py',246),
  ('assignment -> identifier LPARENARR integer RPARENARR ASSIGNMENT expression SEMICOLON','assignment',7,'p_assignment','grammar.py',247),
  ('expression -> term','expression',1,'p_expression','grammar.py',256),
  ('expression -> expression sign term','expression',3,'p_expression','grammar.py',257),
  ('expression -> expression and_or expression','expression',3,'p_expression','grammar.py',258),
  ('and_or -> AND','and_or',1,'p_and_or','grammar.py',266),
  ('and_or -> OR','and_or',1,'p_and_or','grammar.py',267),
  ('sign -> PLUS','sign',1,'p_sign','grammar.py',272),
  ('sign -> MINUS','sign',1,'p_sign','grammar.py',273),
  ('sign -> EQ','sign',1,'p_sign','grammar.py',274),
  ('sign -> NEQ','sign',1,'p_sign','grammar.py',275),
  ('sign -> GT','sign',1,'p_sign','grammar.py',276),
  ('sign -> LT','sign',1,'p_sign','grammar.py',277),
  ('sign -> GTE','sign',1,'p_sign','grammar.py',278),
  ('sign -> LTE','sign',1,'p_sign','grammar.py',279),
  ('term -> integer','term',1,'p_term','grammar.py',285),
  ('term -> real','term',1,'p_term','grammar.py',286),
  ('term -> char','term',1,'p_term','grammar.py',287),
  ('term -> string','term',1,'p_term','grammar.py',288),
  ('term -> function_call','term',1,'p_term','grammar.py',289),
  ('term -> identifier','term',1,'p_term','grammar.py',290),
  ('integer -> INTEGER','integer',1,'p_integer','grammar.py',297),
  ('real -> REAL','real',1,'p_real','grammar.py',302),
  ('string -> STRING','string',1,'p_string','grammar.py',307),
  ('char -> CHAR','char',1,'p_char','grammar.py',312),
  ('function_call -> identifier LPAREN identifier_list RPAREN','function_call',4,'p_function_call','grammar.py',317),
  ('variable_declaration_list -> variable_declaration','variable_declaration_list',1,'p_variable_declaration_list','grammar.py',323),
  ('variable_declaration_list -> variable_declaration variable_declaration_list','variable_declaration_list',2,'p_variable_declaration_list','grammar.py',324),
  ('variable_declaration -> identifier_list COLON simple_type_name SEMICOLON','variable_declaration',4,'p_variable_declaration','grammar.py',335),
  ('variable_declaration -> identifier_list COLON SSTRING SEMICOLON','variable_declaration',4,'p_variable_declaration','grammar.py',336),
  ('variable_declaration -> identifier COLON simple_type_name SEMICOLON','variable_declaration',4,'p_variable_declaration','grammar.py',337),
  ('variable_declaration -> identifier COLON SSTRING SEMICOLON','variable_declaration',4,'p_variable_declaration','grammar.py',338),
  ('variable_declaration -> identifier COLON identifier SEMICOLON','variable_declaration',4,'p_variable_declaration','grammar.py',339),
  ('variable_declaration -> identifier COLON ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON','variable_declaration',11,'p_variable_declaration','grammar.py',340),
  ('identifier_list -> identifier COMMA identifier_list','identifier_list',3,'p_identifier_list','grammar.py',350),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','grammar.py',351),
  ('simple_type_name -> SSTRING','simple_type_name',1,'p_simple_type_name','grammar.py',360),
  ('simple_type_name -> SCHAR','simple_type_name',1,'p_simple_type_name','grammar.py',361),
  ('simple_type_name -> SREAL','simple_type_name',1,'p_simple_type_name','grammar.py',362),
  ('simple_type_name -> SINTEGER','simple_type_name',1,'p_simple_type_name','grammar.py',363),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','grammar.py',370),
]
