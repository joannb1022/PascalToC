
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftPLUSMINUSleftEQNEQLTELTGTGTEleftORANDAND ARRAY ASSIGNMENT BEGIN CHAR COLON COMMA DD DO DOT ELSE END EQ FUNCTION GT GTE IDENTIFIER IF INTEGER LPAREN LPARENARR LT LTE MINUS NEQ OF OR PLUS PROGRAM REAL RPAREN RPARENARR SCHAR SEMICOLON SINTEGER SREAL SSTRING STRING THEN TYPE VAR WHILE\n    empty :\n    \n    program : program_heading type_definition_part variable_declaration_part function_declaration_part compound_statement\n    \n    program_heading : PROGRAM identifier SEMICOLON\n    \n    declaration_part : type_definition_part variable_declaration_part function_declaration_part\n    \n    block :  declaration_part statement_part\n    \n    type_definition_part : TYPE type_definition_list\n                            | empty\n    \n    type_definition_list : type_definition\n                        | type_definition type_definition_list\n    \n    variable_declaration_part : VAR variable_declaration_list\n                                | empty\n    \n    function_declaration_part : function_declaration function_declaration_part\n                                | empty\n     function_declaration : function_heading SEMICOLON block function_heading : FUNCTION identifier LPAREN parameters RPAREN COLON simple_type_name parameters : names_list COLON simple_type_name\n                    | names_list COLON simple_type_name SEMICOLON parameters names_list : identifier\n                    | identifier COMMA names_list\n    \n    type_definition : identifier EQ ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON\n\n    \n    statement_part : compound_statement\n                    | assignment_list\n                    | while_statement\n                    | if_else_statement\n                    | expression\n                    | empty\n    \n    while_statement : WHILE expression DO statement_part \n    \n    ending : SEMICOLON\n            | empty\n    \n    if_else_statement : IF expression THEN statement_part\n                        | IF expression THEN statement_part ELSE statement_part\n     compound_statement : BEGIN statement_part END SEMICOLON\n                            | BEGIN statement_part END DOT\n                             \n    assignment_list : assignment statement_part\n     assignment : identifier ASSIGNMENT expression ending\n                     | identifier LPARENARR term RPARENARR ASSIGNMENT expression ending  expression : term\n                    | expression sign term\n                    | expression and_or expression and_or : AND\n                | OR sign : PLUS\n            | MINUS\n            | EQ\n            | NEQ\n            | GT\n            | LT\n            | GTE\n            | LTE term : integer\n            | real\n            | char\n            | string\n            | function_call\n            | identifier\n     integer : INTEGER real : REALstring : STRING char : CHAR function_call : identifier LPAREN identifier_list RPAREN\n    variable_declaration_list : variable_declaration\n                                | variable_declaration variable_declaration_list\n\n    \n    variable_declaration : identifier_list COLON simple_type_name SEMICOLON\n                        | identifier COLON simple_type_name SEMICOLON\n                        | identifier COLON identifier SEMICOLON\n                        | identifier COLON ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON\n    \n    identifier_list : identifier COMMA identifier_list\n                    | identifier COMMA identifier\n                    | empty\n     simple_type_name : SSTRING\n                        | SCHAR\n                        | SREAL\n                        | SINTEGER\n                        | identifier  identifier : IDENTIFIER '
    
_lr_action_items = {'PROGRAM':([0,],[3,]),'$end':([1,28,105,106,],[0,-2,-32,-33,]),'TYPE':([2,15,31,],[5,-3,5,]),'VAR':([2,4,6,12,13,15,26,31,61,148,],[-1,10,-7,-6,-8,-3,-9,-1,10,-20,]),'FUNCTION':([2,4,6,8,9,11,12,13,15,17,18,21,22,26,30,31,33,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,88,90,95,96,100,101,102,105,106,107,108,109,110,111,115,121,122,123,124,125,127,133,139,140,144,148,149,],[-1,-1,-7,-75,20,-11,-6,-8,-3,20,-13,-10,-61,-9,-12,-1,-62,-21,-22,-23,-24,-25,-26,-1,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,-14,-1,-1,-34,-55,-5,20,-63,-65,-64,-32,-33,-38,-39,-1,-1,-1,-4,-27,-30,-35,-28,-29,-60,-1,-31,-1,-36,-20,-66,]),'BEGIN':([2,4,6,8,9,11,12,13,15,16,17,18,21,22,26,29,30,31,33,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,88,90,95,96,100,101,102,105,106,107,108,109,110,111,115,121,122,123,124,125,127,133,139,140,144,148,149,],[-1,-1,-7,-75,-1,-11,-6,-8,-3,29,-1,-13,-10,-61,-9,29,-12,-1,-62,-21,-22,-23,-24,-25,-26,29,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,-14,29,-1,-34,-55,-5,-1,-63,-65,-64,-32,-33,-38,-39,29,29,-1,-4,-27,-30,-35,-28,-29,-60,29,-31,-1,-36,-20,-66,]),'IDENTIFIER':([3,5,6,8,10,11,12,13,17,18,20,21,22,26,29,30,31,33,34,35,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,76,77,78,79,80,81,82,83,84,85,86,87,88,90,92,93,94,95,96,100,101,102,105,106,107,108,109,110,111,115,116,118,121,122,123,124,125,127,129,133,134,136,139,140,143,144,145,148,149,],[8,8,-7,-75,8,-11,-6,8,-1,-13,8,-10,8,-9,8,-12,-1,-62,8,8,8,-21,-22,-23,-24,-25,-26,8,8,8,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,-14,8,-1,8,8,8,-42,-43,-44,-45,-46,-47,-48,-49,-40,-41,-34,-55,8,8,8,-5,-1,-63,-65,-64,-32,-33,-38,-39,8,8,-1,-4,8,8,-27,-30,-35,-28,-29,-60,8,8,8,8,-31,-1,8,-36,8,-20,-66,]),'WHILE':([6,8,11,12,13,17,18,21,22,26,29,30,31,33,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,88,90,95,96,100,101,102,105,106,107,108,109,110,111,115,121,122,123,124,125,127,133,139,140,144,148,149,],[-7,-75,-11,-6,-8,-1,-13,-10,-61,-9,46,-12,-1,-62,-21,-22,-23,-24,-25,-26,46,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,-14,46,-1,-34,-55,-5,-1,-63,-65,-64,-32,-33,-38,-39,46,46,-1,-4,-27,-30,-35,-28,-29,-60,46,-31,-1,-36,-20,-66,]),'IF':([6,8,11,12,13,17,18,21,22,26,29,30,31,33,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61,88,90,95,96,100,101,102,105,106,107,108,109,110,111,115,121,122,123,124,125,127,133,139,140,144,148,149,],[-7,-75,-11,-6,-8,-1,-13,-10,-61,-9,47,-12,-1,-62,-21,-22,-23,-24,-25,-26,47,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,-14,47,-1,-34,-55,-5,-1,-63,-65,-64,-32,-33,-38,-39,47,47,-1,-4,-27,-30,-35,-28,-29,-60,47,-31,-1,-36,-20,-66,]),'INTEGER':([6,8,11,12,13,17,18,21,22,26,29,30,31,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,74,76,77,78,79,80,81,82,83,84,85,86,87,88,90,92,93,95,96,100,101,102,103,105,106,107,108,109,110,111,115,120,121,122,123,124,125,127,131,133,134,139,140,144,148,149,],[-7,-75,-11,-6,-8,-1,-13,-10,-61,-9,55,-12,-1,-62,-21,-22,-23,-24,-25,-26,55,55,55,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,-14,55,-1,104,55,55,-42,-43,-44,-45,-46,-47,-48,-49,-40,-41,-34,-55,55,55,-5,-1,-63,-65,-64,119,-32,-33,-38,-39,55,55,-1,-4,132,-27,-30,-35,-28,-29,-60,137,55,55,-31,-1,-36,-20,-66,]),'REAL':([6,8,11,12,13,17,18,21,22,26,29,30,31,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,76,77,78,79,80,81,82,83,84,85,86,87,88,90,92,93,95,96,100,101,102,105,106,107,108,109,110,111,115,121,122,123,124,125,127,133,134,139,140,144,148,149,],[-7,-75,-11,-6,-8,-1,-13,-10,-61,-9,56,-12,-1,-62,-21,-22,-23,-24,-25,-26,56,56,56,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,-14,56,-1,56,56,-42,-43,-44,-45,-46,-47,-48,-49,-40,-41,-34,-55,56,56,-5,-1,-63,-65,-64,-32,-33,-38,-39,56,56,-1,-4,-27,-30,-35,-28,-29,-60,56,56,-31,-1,-36,-20,-66,]),'CHAR':([6,8,11,12,13,17,18,21,22,26,29,30,31,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,76,77,78,79,80,81,82,83,84,85,86,87,88,90,92,93,95,96,100,101,102,105,106,107,108,109,110,111,115,121,122,123,124,125,127,133,134,139,140,144,148,149,],[-7,-75,-11,-6,-8,-1,-13,-10,-61,-9,57,-12,-1,-62,-21,-22,-23,-24,-25,-26,57,57,57,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,-14,57,-1,57,57,-42,-43,-44,-45,-46,-47,-48,-49,-40,-41,-34,-55,57,57,-5,-1,-63,-65,-64,-32,-33,-38,-39,57,57,-1,-4,-27,-30,-35,-28,-29,-60,57,57,-31,-1,-36,-20,-66,]),'STRING':([6,8,11,12,13,17,18,21,22,26,29,30,31,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,76,77,78,79,80,81,82,83,84,85,86,87,88,90,92,93,95,96,100,101,102,105,106,107,108,109,110,111,115,121,122,123,124,125,127,133,134,139,140,144,148,149,],[-7,-75,-11,-6,-8,-1,-13,-10,-61,-9,58,-12,-1,-62,-21,-22,-23,-24,-25,-26,58,58,58,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,-14,58,-1,58,58,-42,-43,-44,-45,-46,-47,-48,-49,-40,-41,-34,-55,58,58,-5,-1,-63,-65,-64,-32,-33,-38,-39,58,58,-1,-4,-27,-30,-35,-28,-29,-60,58,58,-31,-1,-36,-20,-66,]),'SEMICOLON':([7,8,19,48,50,51,52,53,54,55,56,57,58,63,64,65,66,67,68,69,70,75,90,107,108,111,127,130,135,140,146,147,],[15,-75,31,-37,-50,-51,-52,-53,-54,-56,-57,-59,-58,100,-70,-71,-72,-73,-74,101,102,105,-55,-38,-39,124,-60,136,-15,124,148,149,]),'EQ':([8,14,43,48,49,50,51,52,53,54,55,56,57,58,89,90,91,107,108,111,127,140,],[-75,27,80,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,80,-55,80,-38,80,80,-60,80,]),'COLON':([8,10,22,23,24,25,36,72,73,97,99,100,101,102,117,128,149,],[-75,-1,-1,34,35,-69,-1,-68,-67,-18,118,-63,-65,-64,129,-19,-66,]),'COMMA':([8,24,72,97,113,],[-75,36,36,116,36,]),'LPAREN':([8,32,49,90,],[-75,62,94,94,]),'ASSIGNMENT':([8,49,126,],[-75,92,134,]),'LPARENARR':([8,37,49,71,],[-75,74,93,103,]),'PLUS':([8,43,48,49,50,51,52,53,54,55,56,57,58,89,90,91,107,108,111,127,140,],[-75,78,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,78,-55,78,-38,78,78,-60,78,]),'MINUS':([8,43,48,49,50,51,52,53,54,55,56,57,58,89,90,91,107,108,111,127,140,],[-75,79,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,79,-55,79,-38,79,79,-60,79,]),'NEQ':([8,43,48,49,50,51,52,53,54,55,56,57,58,89,90,91,107,108,111,127,140,],[-75,81,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,81,-55,81,-38,81,81,-60,81,]),'GT':([8,43,48,49,50,51,52,53,54,55,56,57,58,89,90,91,107,108,111,127,140,],[-75,82,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,82,-55,82,-38,82,82,-60,82,]),'LT':([8,43,48,49,50,51,52,53,54,55,56,57,58,89,90,91,107,108,111,127,140,],[-75,83,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,83,-55,83,-38,83,83,-60,83,]),'GTE':([8,43,48,49,50,51,52,53,54,55,56,57,58,89,90,91,107,108,111,127,140,],[-75,84,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,84,-55,84,-38,84,84,-60,84,]),'LTE':([8,43,48,49,50,51,52,53,54,55,56,57,58,89,90,91,107,108,111,127,140,],[-75,85,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,85,-55,85,-38,85,85,-60,85,]),'AND':([8,43,48,49,50,51,52,53,54,55,56,57,58,89,90,91,107,108,111,127,140,],[-75,86,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,86,-55,86,-38,86,86,-60,86,]),'OR':([8,43,48,49,50,51,52,53,54,55,56,57,58,89,90,91,107,108,111,127,140,],[-75,87,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,87,-55,87,-38,87,87,-60,87,]),'END':([8,29,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,88,90,105,106,107,108,109,110,111,121,122,123,124,125,127,133,139,140,144,],[-75,-1,75,-21,-22,-23,-24,-25,-26,-1,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,-34,-55,-32,-33,-38,-39,-1,-1,-1,-27,-30,-35,-28,-29,-60,-1,-31,-1,-36,]),'RPAREN':([8,25,36,64,65,66,67,68,72,73,94,98,114,130,141,],[-75,-69,-1,-70,-71,-72,-73,-74,-68,-67,-1,117,127,-16,-17,]),'ELSE':([8,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,88,90,105,106,107,108,109,110,111,121,122,123,124,125,127,133,139,140,144,],[-75,-21,-22,-23,-24,-25,-26,-1,-37,-55,-50,-51,-52,-53,-54,-56,-57,-59,-58,-34,-55,-32,-33,-38,-39,-1,-1,-1,-27,133,-35,-28,-29,-60,-1,-31,-1,-36,]),'DO':([8,48,50,51,52,53,54,55,56,57,58,89,90,107,108,127,],[-75,-37,-50,-51,-52,-53,-54,-56,-57,-59,-58,109,-55,-38,-39,-60,]),'THEN':([8,48,50,51,52,53,54,55,56,57,58,90,91,107,108,127,],[-75,-37,-50,-51,-52,-53,-54,-56,-57,-59,-58,-55,110,-38,-39,-60,]),'RPARENARR':([8,50,51,52,53,54,55,56,57,58,90,112,127,132,137,],[-75,-50,-51,-52,-53,-54,-56,-57,-59,-58,-55,126,-60,138,142,]),'ARRAY':([27,35,],[37,71,]),'SSTRING':([34,35,118,129,143,145,],[64,64,64,64,64,64,]),'SCHAR':([34,35,118,129,143,145,],[65,65,65,65,65,65,]),'SREAL':([34,35,118,129,143,145,],[66,66,66,66,66,66,]),'SINTEGER':([34,35,118,129,143,145,],[67,67,67,67,67,67,]),'DOT':([75,],[106,]),'DD':([104,119,],[120,131,]),'OF':([138,142,],[143,145,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_heading':([0,],[2,]),'type_definition_part':([2,31,],[4,61,]),'empty':([2,4,9,10,17,22,29,31,36,45,60,61,94,96,109,110,111,133,140,],[6,11,18,25,18,25,44,6,25,44,44,11,25,18,44,44,125,44,125,]),'identifier':([3,5,10,13,20,22,29,34,35,36,45,46,47,60,62,76,77,92,93,94,109,110,116,118,129,133,134,136,143,145,],[7,14,24,14,32,24,49,68,69,72,49,90,90,49,97,90,90,90,90,113,49,49,97,68,68,49,90,97,68,68,]),'variable_declaration_part':([4,61,],[9,96,]),'type_definition_list':([5,13,],[12,26,]),'type_definition':([5,13,],[13,13,]),'function_declaration_part':([9,17,96,],[16,30,115,]),'function_declaration':([9,17,96,],[17,17,17,]),'function_heading':([9,17,96,],[19,19,19,]),'variable_declaration_list':([10,22,],[21,33,]),'variable_declaration':([10,22,],[22,22,]),'identifier_list':([10,22,36,94,],[23,23,73,114,]),'compound_statement':([16,29,45,60,109,110,133,],[28,39,39,39,39,39,39,]),'statement_part':([29,45,60,109,110,133,],[38,88,95,121,122,139,]),'assignment_list':([29,45,60,109,110,133,],[40,40,40,40,40,40,]),'while_statement':([29,45,60,109,110,133,],[41,41,41,41,41,41,]),'if_else_statement':([29,45,60,109,110,133,],[42,42,42,42,42,42,]),'expression':([29,45,46,47,60,77,92,109,110,133,134,],[43,43,89,91,43,108,111,43,43,43,140,]),'assignment':([29,45,60,109,110,133,],[45,45,45,45,45,45,]),'term':([29,45,46,47,60,76,77,92,93,109,110,133,134,],[48,48,48,48,48,107,48,48,112,48,48,48,48,]),'integer':([29,45,46,47,60,76,77,92,93,109,110,133,134,],[50,50,50,50,50,50,50,50,50,50,50,50,50,]),'real':([29,45,46,47,60,76,77,92,93,109,110,133,134,],[51,51,51,51,51,51,51,51,51,51,51,51,51,]),'char':([29,45,46,47,60,76,77,92,93,109,110,133,134,],[52,52,52,52,52,52,52,52,52,52,52,52,52,]),'string':([29,45,46,47,60,76,77,92,93,109,110,133,134,],[53,53,53,53,53,53,53,53,53,53,53,53,53,]),'function_call':([29,45,46,47,60,76,77,92,93,109,110,133,134,],[54,54,54,54,54,54,54,54,54,54,54,54,54,]),'block':([31,],[59,]),'declaration_part':([31,],[60,]),'simple_type_name':([34,35,118,129,143,145,],[63,70,130,135,146,147,]),'sign':([43,89,91,108,111,140,],[76,76,76,76,76,76,]),'and_or':([43,89,91,108,111,140,],[77,77,77,77,77,77,]),'parameters':([62,136,],[98,141,]),'names_list':([62,116,136,],[99,128,99,]),'ending':([111,140,],[123,144,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',13),
  ('program -> program_heading type_definition_part variable_declaration_part function_declaration_part compound_statement','program',5,'p_program','grammar.py',20),
  ('program_heading -> PROGRAM identifier SEMICOLON','program_heading',3,'p_program_heading','grammar.py',27),
  ('declaration_part -> type_definition_part variable_declaration_part function_declaration_part','declaration_part',3,'p_declaration_part','grammar.py',34),
  ('block -> declaration_part statement_part','block',2,'p_block','grammar.py',42),
  ('type_definition_part -> TYPE type_definition_list','type_definition_part',2,'p_type_definition_part','grammar.py',49),
  ('type_definition_part -> empty','type_definition_part',1,'p_type_definition_part','grammar.py',50),
  ('type_definition_list -> type_definition','type_definition_list',1,'p_type_definition_list','grammar.py',59),
  ('type_definition_list -> type_definition type_definition_list','type_definition_list',2,'p_type_definition_list','grammar.py',60),
  ('variable_declaration_part -> VAR variable_declaration_list','variable_declaration_part',2,'p_variable_declaration_part','grammar.py',70),
  ('variable_declaration_part -> empty','variable_declaration_part',1,'p_variable_declaration_part','grammar.py',71),
  ('function_declaration_part -> function_declaration function_declaration_part','function_declaration_part',2,'p_function_declaration_part','grammar.py',81),
  ('function_declaration_part -> empty','function_declaration_part',1,'p_function_declaration_part','grammar.py',82),
  ('function_declaration -> function_heading SEMICOLON block','function_declaration',3,'p_function_declaration','grammar.py',91),
  ('function_heading -> FUNCTION identifier LPAREN parameters RPAREN COLON simple_type_name','function_heading',7,'p_function_heading','grammar.py',97),
  ('parameters -> names_list COLON simple_type_name','parameters',3,'p_parameters','grammar.py',102),
  ('parameters -> names_list COLON simple_type_name SEMICOLON parameters','parameters',5,'p_parameters','grammar.py',103),
  ('names_list -> identifier','names_list',1,'p_names_list','grammar.py',108),
  ('names_list -> identifier COMMA names_list','names_list',3,'p_names_list','grammar.py',109),
  ('type_definition -> identifier EQ ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON','type_definition',11,'p_type_definition','grammar.py',119),
  ('statement_part -> compound_statement','statement_part',1,'p_statement_part','grammar.py',127),
  ('statement_part -> assignment_list','statement_part',1,'p_statement_part','grammar.py',128),
  ('statement_part -> while_statement','statement_part',1,'p_statement_part','grammar.py',129),
  ('statement_part -> if_else_statement','statement_part',1,'p_statement_part','grammar.py',130),
  ('statement_part -> expression','statement_part',1,'p_statement_part','grammar.py',131),
  ('statement_part -> empty','statement_part',1,'p_statement_part','grammar.py',132),
  ('while_statement -> WHILE expression DO statement_part','while_statement',4,'p_while_statement','grammar.py',142),
  ('ending -> SEMICOLON','ending',1,'p_ending','grammar.py',149),
  ('ending -> empty','ending',1,'p_ending','grammar.py',150),
  ('if_else_statement -> IF expression THEN statement_part','if_else_statement',4,'p_if_else_statement','grammar.py',157),
  ('if_else_statement -> IF expression THEN statement_part ELSE statement_part','if_else_statement',6,'p_if_else_statement','grammar.py',158),
  ('compound_statement -> BEGIN statement_part END SEMICOLON','compound_statement',4,'p_compound_statement','grammar.py',167),
  ('compound_statement -> BEGIN statement_part END DOT','compound_statement',4,'p_compound_statement','grammar.py',168),
  ('assignment_list -> assignment statement_part','assignment_list',2,'p_assignment_list','grammar.py',175),
  ('assignment -> identifier ASSIGNMENT expression ending','assignment',4,'p_assingment','grammar.py',185),
  ('assignment -> identifier LPARENARR term RPARENARR ASSIGNMENT expression ending','assignment',7,'p_assingment','grammar.py',186),
  ('expression -> term','expression',1,'p_expression','grammar.py',193),
  ('expression -> expression sign term','expression',3,'p_expression','grammar.py',194),
  ('expression -> expression and_or expression','expression',3,'p_expression','grammar.py',195),
  ('and_or -> AND','and_or',1,'p_and_or','grammar.py',202),
  ('and_or -> OR','and_or',1,'p_and_or','grammar.py',203),
  ('sign -> PLUS','sign',1,'p_sign','grammar.py',208),
  ('sign -> MINUS','sign',1,'p_sign','grammar.py',209),
  ('sign -> EQ','sign',1,'p_sign','grammar.py',210),
  ('sign -> NEQ','sign',1,'p_sign','grammar.py',211),
  ('sign -> GT','sign',1,'p_sign','grammar.py',212),
  ('sign -> LT','sign',1,'p_sign','grammar.py',213),
  ('sign -> GTE','sign',1,'p_sign','grammar.py',214),
  ('sign -> LTE','sign',1,'p_sign','grammar.py',215),
  ('term -> integer','term',1,'p_term','grammar.py',221),
  ('term -> real','term',1,'p_term','grammar.py',222),
  ('term -> char','term',1,'p_term','grammar.py',223),
  ('term -> string','term',1,'p_term','grammar.py',224),
  ('term -> function_call','term',1,'p_term','grammar.py',225),
  ('term -> identifier','term',1,'p_term','grammar.py',226),
  ('integer -> INTEGER','integer',1,'p_integer','grammar.py',233),
  ('real -> REAL','real',1,'p_real','grammar.py',238),
  ('string -> STRING','string',1,'p_string','grammar.py',243),
  ('char -> CHAR','char',1,'p_char','grammar.py',248),
  ('function_call -> identifier LPAREN identifier_list RPAREN','function_call',4,'p_function_call','grammar.py',253),
  ('variable_declaration_list -> variable_declaration','variable_declaration_list',1,'p_variable_declaration_list','grammar.py',259),
  ('variable_declaration_list -> variable_declaration variable_declaration_list','variable_declaration_list',2,'p_variable_declaration_list','grammar.py',260),
  ('variable_declaration -> identifier_list COLON simple_type_name SEMICOLON','variable_declaration',4,'p_variable_declaration','grammar.py',271),
  ('variable_declaration -> identifier COLON simple_type_name SEMICOLON','variable_declaration',4,'p_variable_declaration','grammar.py',272),
  ('variable_declaration -> identifier COLON identifier SEMICOLON','variable_declaration',4,'p_variable_declaration','grammar.py',273),
  ('variable_declaration -> identifier COLON ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON','variable_declaration',11,'p_variable_declaration','grammar.py',274),
  ('identifier_list -> identifier COMMA identifier_list','identifier_list',3,'p_identifier_list','grammar.py',286),
  ('identifier_list -> identifier COMMA identifier','identifier_list',3,'p_identifier_list','grammar.py',287),
  ('identifier_list -> empty','identifier_list',1,'p_identifier_list','grammar.py',288),
  ('simple_type_name -> SSTRING','simple_type_name',1,'p_simple_type_name','grammar.py',297),
  ('simple_type_name -> SCHAR','simple_type_name',1,'p_simple_type_name','grammar.py',298),
  ('simple_type_name -> SREAL','simple_type_name',1,'p_simple_type_name','grammar.py',299),
  ('simple_type_name -> SINTEGER','simple_type_name',1,'p_simple_type_name','grammar.py',300),
  ('simple_type_name -> identifier','simple_type_name',1,'p_simple_type_name','grammar.py',301),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','grammar.py',307),
]
