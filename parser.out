Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> program_heading type_definition_part variable_declaration_part function_declaration_part compound_statement_dot
Rule 3     program_heading -> PROGRAM identifier SEMICOLON
Rule 4     declaration_part -> type_definition_part variable_declaration_part function_declaration_part
Rule 5     block -> declaration_part statement_part
Rule 6     type_definition_part -> TYPE type_definition_list
Rule 7     type_definition_part -> empty
Rule 8     type_definition_list -> type_definition
Rule 9     type_definition_list -> type_definition type_definition_list
Rule 10    variable_declaration_part -> VAR variable_declaration_list
Rule 11    variable_declaration_part -> empty
Rule 12    function_declaration_part -> function_declaration function_declaration_part
Rule 13    function_declaration_part -> empty
Rule 14    function_declaration -> function_heading SEMICOLON block
Rule 15    function_heading -> FUNCTION identifier LPAREN parameters RPAREN COLON simple_type_name
Rule 16    parameters -> names_list COLON simple_type_name
Rule 17    parameters -> names_list COLON simple_type_name SEMICOLON parameters
Rule 18    names_list -> identifier
Rule 19    names_list -> identifier COMMA names_list
Rule 20    type_definition -> identifier EQ ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON
Rule 21    statement_part -> compound_statement
Rule 22    statement_part -> assignment_list
Rule 23    statement_part -> while_statement_list
Rule 24    statement_part -> if_else_statement_list
Rule 25    statement_part -> empty
Rule 26    while_statement_list -> while_statement statement_part
Rule 27    if_else_statement_list -> if_else_statement statement_part
Rule 28    single_statement_part -> assignment
Rule 29    single_statement_part -> while_statement
Rule 30    single_statement_part -> if_else_statement
Rule 31    single_statement_part -> empty
Rule 32    while_statement -> WHILE expression DO single_statement_part
Rule 33    while_statement -> WHILE expression DO BEGIN statement_part END SEMICOLON
Rule 34    ending -> SEMICOLON
Rule 35    ending -> empty
Rule 36    then_statement -> single_statement_part
Rule 37    then_statement -> BEGIN statement_part END SEMICOLON
Rule 38    else_statement -> single_statement_part
Rule 39    else_statement -> BEGIN statement_part END
Rule 40    if_else_statement -> IF expression THEN then_statement
Rule 41    if_else_statement -> IF expression THEN else_statement ELSE then_statement
Rule 42    compound_statement -> BEGIN statement_part END SEMICOLON
Rule 43    compound_statement_dot -> BEGIN statement_part END DOT
Rule 44    assignment_list -> assignment statement_part
Rule 45    assignment -> identifier ASSIGNMENT expression ending
Rule 46    assignment -> identifier LPARENARR term RPARENARR ASSIGNMENT expression ending
Rule 47    expression -> term
Rule 48    expression -> expression sign term
Rule 49    expression -> expression and_or expression
Rule 50    and_or -> AND
Rule 51    and_or -> OR
Rule 52    sign -> PLUS
Rule 53    sign -> MINUS
Rule 54    sign -> EQ
Rule 55    sign -> NEQ
Rule 56    sign -> GT
Rule 57    sign -> LT
Rule 58    sign -> GTE
Rule 59    sign -> LTE
Rule 60    term -> integer
Rule 61    term -> real
Rule 62    term -> char
Rule 63    term -> string
Rule 64    term -> function_call
Rule 65    term -> identifier
Rule 66    integer -> INTEGER
Rule 67    real -> REAL
Rule 68    string -> STRING
Rule 69    char -> CHAR
Rule 70    function_call -> identifier LPAREN identifier_list RPAREN
Rule 71    variable_declaration_list -> variable_declaration
Rule 72    variable_declaration_list -> variable_declaration variable_declaration_list
Rule 73    variable_declaration -> identifier_list COLON simple_type_name SEMICOLON
Rule 74    variable_declaration -> identifier COLON simple_type_name SEMICOLON
Rule 75    variable_declaration -> identifier COLON identifier SEMICOLON
Rule 76    variable_declaration -> identifier COLON ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON
Rule 77    identifier_list -> identifier COMMA identifier_list
Rule 78    identifier_list -> identifier
Rule 79    simple_type_name -> SSTRING
Rule 80    simple_type_name -> SCHAR
Rule 81    simple_type_name -> SREAL
Rule 82    simple_type_name -> SINTEGER
Rule 83    identifier -> IDENTIFIER

Terminals, with rules where they appear

AND                  : 50
ARRAY                : 20 76
ASSIGNMENT           : 45 46
BEGIN                : 33 37 39 42 43
CHAR                 : 69
COLON                : 15 16 17 73 74 75 76
COMMA                : 19 77
DD                   : 20 76
DO                   : 32 33
DOT                  : 43
ELSE                 : 41
END                  : 33 37 39 42 43
EQ                   : 20 54
FUNCTION             : 15
GT                   : 56
GTE                  : 58
IDENTIFIER           : 83
IF                   : 40 41
INTEGER              : 20 20 66 76 76
LPAREN               : 15 70
LPARENARR            : 20 46 76
LT                   : 57
LTE                  : 59
MINUS                : 53
NEQ                  : 55
OF                   : 20 76
OR                   : 51
PLUS                 : 52
PROGRAM              : 3
REAL                 : 67
RPAREN               : 15 70
RPARENARR            : 20 46 76
SCHAR                : 80
SEMICOLON            : 3 14 17 20 33 34 37 42 73 74 75 76
SINTEGER             : 82
SREAL                : 81
SSTRING              : 79
STRING               : 68
THEN                 : 40 41
TYPE                 : 6
VAR                  : 10
WHILE                : 32 33
error                : 

Nonterminals, with rules where they appear

and_or               : 49
assignment           : 28 44
assignment_list      : 22
block                : 14
char                 : 62
compound_statement   : 21
compound_statement_dot : 2
declaration_part     : 5
else_statement       : 41
empty                : 7 11 13 25 31 35
ending               : 45 46
expression           : 32 33 40 41 45 46 48 49 49
function_call        : 64
function_declaration : 12
function_declaration_part : 2 4 12
function_heading     : 14
identifier           : 3 15 18 19 20 45 46 65 70 74 75 75 76 77 78
identifier_list      : 70 73 77
if_else_statement    : 27 30
if_else_statement_list : 24
integer              : 60
names_list           : 16 17 19
parameters           : 15 17
program              : 0
program_heading      : 2
real                 : 61
sign                 : 48
simple_type_name     : 15 16 17 20 73 74 76
single_statement_part : 32 36 38
statement_part       : 5 26 27 33 37 39 42 43 44
string               : 63
term                 : 46 47 48
then_statement       : 40 41
type_definition      : 8 9
type_definition_list : 6 9
type_definition_part : 2 4
variable_declaration : 71 72
variable_declaration_list : 10 72
variable_declaration_part : 2 4
while_statement      : 26 29
while_statement_list : 23

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . program_heading type_definition_part variable_declaration_part function_declaration_part compound_statement_dot
    (3) program_heading -> . PROGRAM identifier SEMICOLON

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    program_heading                shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (2) program -> program_heading . type_definition_part variable_declaration_part function_declaration_part compound_statement_dot
    (6) type_definition_part -> . TYPE type_definition_list
    (7) type_definition_part -> . empty
    (1) empty -> .

    TYPE            shift and go to state 5
    VAR             reduce using rule 1 (empty -> .)
    FUNCTION        reduce using rule 1 (empty -> .)
    BEGIN           reduce using rule 1 (empty -> .)

    type_definition_part           shift and go to state 4
    empty                          shift and go to state 6

state 3

    (3) program_heading -> PROGRAM . identifier SEMICOLON
    (83) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8

    identifier                     shift and go to state 7

state 4

    (2) program -> program_heading type_definition_part . variable_declaration_part function_declaration_part compound_statement_dot
    (10) variable_declaration_part -> . VAR variable_declaration_list
    (11) variable_declaration_part -> . empty
    (1) empty -> .

    VAR             shift and go to state 10
    FUNCTION        reduce using rule 1 (empty -> .)
    BEGIN           reduce using rule 1 (empty -> .)

    variable_declaration_part      shift and go to state 9
    empty                          shift and go to state 11

state 5

    (6) type_definition_part -> TYPE . type_definition_list
    (8) type_definition_list -> . type_definition
    (9) type_definition_list -> . type_definition type_definition_list
    (20) type_definition -> . identifier EQ ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON
    (83) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8

    type_definition_list           shift and go to state 12
    type_definition                shift and go to state 13
    identifier                     shift and go to state 14

state 6

    (7) type_definition_part -> empty .

    VAR             reduce using rule 7 (type_definition_part -> empty .)
    FUNCTION        reduce using rule 7 (type_definition_part -> empty .)
    BEGIN           reduce using rule 7 (type_definition_part -> empty .)
    WHILE           reduce using rule 7 (type_definition_part -> empty .)
    IF              reduce using rule 7 (type_definition_part -> empty .)
    IDENTIFIER      reduce using rule 7 (type_definition_part -> empty .)


state 7

    (3) program_heading -> PROGRAM identifier . SEMICOLON

    SEMICOLON       shift and go to state 15


state 8

    (83) identifier -> IDENTIFIER .

    SEMICOLON       reduce using rule 83 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 83 (identifier -> IDENTIFIER .)
    COLON           reduce using rule 83 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 83 (identifier -> IDENTIFIER .)
    LPAREN          reduce using rule 83 (identifier -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 83 (identifier -> IDENTIFIER .)
    LPARENARR       reduce using rule 83 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 83 (identifier -> IDENTIFIER .)
    DO              reduce using rule 83 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 83 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 83 (identifier -> IDENTIFIER .)
    NEQ             reduce using rule 83 (identifier -> IDENTIFIER .)
    GT              reduce using rule 83 (identifier -> IDENTIFIER .)
    LT              reduce using rule 83 (identifier -> IDENTIFIER .)
    GTE             reduce using rule 83 (identifier -> IDENTIFIER .)
    LTE             reduce using rule 83 (identifier -> IDENTIFIER .)
    AND             reduce using rule 83 (identifier -> IDENTIFIER .)
    OR              reduce using rule 83 (identifier -> IDENTIFIER .)
    THEN            reduce using rule 83 (identifier -> IDENTIFIER .)
    BEGIN           reduce using rule 83 (identifier -> IDENTIFIER .)
    WHILE           reduce using rule 83 (identifier -> IDENTIFIER .)
    IF              reduce using rule 83 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 83 (identifier -> IDENTIFIER .)
    END             reduce using rule 83 (identifier -> IDENTIFIER .)
    FUNCTION        reduce using rule 83 (identifier -> IDENTIFIER .)
    ELSE            reduce using rule 83 (identifier -> IDENTIFIER .)
    RPARENARR       reduce using rule 83 (identifier -> IDENTIFIER .)


state 9

    (2) program -> program_heading type_definition_part variable_declaration_part . function_declaration_part compound_statement_dot
    (12) function_declaration_part -> . function_declaration function_declaration_part
    (13) function_declaration_part -> . empty
    (14) function_declaration -> . function_heading SEMICOLON block
    (1) empty -> .
    (15) function_heading -> . FUNCTION identifier LPAREN parameters RPAREN COLON simple_type_name

    BEGIN           reduce using rule 1 (empty -> .)
    FUNCTION        shift and go to state 20

    function_declaration_part      shift and go to state 16
    function_declaration           shift and go to state 17
    empty                          shift and go to state 18
    function_heading               shift and go to state 19

state 10

    (10) variable_declaration_part -> VAR . variable_declaration_list
    (71) variable_declaration_list -> . variable_declaration
    (72) variable_declaration_list -> . variable_declaration variable_declaration_list
    (73) variable_declaration -> . identifier_list COLON simple_type_name SEMICOLON
    (74) variable_declaration -> . identifier COLON simple_type_name SEMICOLON
    (75) variable_declaration -> . identifier COLON identifier SEMICOLON
    (76) variable_declaration -> . identifier COLON ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON
    (77) identifier_list -> . identifier COMMA identifier_list
    (78) identifier_list -> . identifier
    (83) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8

    variable_declaration_list      shift and go to state 21
    variable_declaration           shift and go to state 22
    identifier_list                shift and go to state 23
    identifier                     shift and go to state 24

state 11

    (11) variable_declaration_part -> empty .

    FUNCTION        reduce using rule 11 (variable_declaration_part -> empty .)
    BEGIN           reduce using rule 11 (variable_declaration_part -> empty .)
    WHILE           reduce using rule 11 (variable_declaration_part -> empty .)
    IF              reduce using rule 11 (variable_declaration_part -> empty .)
    IDENTIFIER      reduce using rule 11 (variable_declaration_part -> empty .)


state 12

    (6) type_definition_part -> TYPE type_definition_list .

    VAR             reduce using rule 6 (type_definition_part -> TYPE type_definition_list .)
    FUNCTION        reduce using rule 6 (type_definition_part -> TYPE type_definition_list .)
    BEGIN           reduce using rule 6 (type_definition_part -> TYPE type_definition_list .)
    WHILE           reduce using rule 6 (type_definition_part -> TYPE type_definition_list .)
    IF              reduce using rule 6 (type_definition_part -> TYPE type_definition_list .)
    IDENTIFIER      reduce using rule 6 (type_definition_part -> TYPE type_definition_list .)


state 13

    (8) type_definition_list -> type_definition .
    (9) type_definition_list -> type_definition . type_definition_list
    (8) type_definition_list -> . type_definition
    (9) type_definition_list -> . type_definition type_definition_list
    (20) type_definition -> . identifier EQ ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON
    (83) identifier -> . IDENTIFIER

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    VAR             reduce using rule 8 (type_definition_list -> type_definition .)
    FUNCTION        reduce using rule 8 (type_definition_list -> type_definition .)
    BEGIN           reduce using rule 8 (type_definition_list -> type_definition .)
    WHILE           reduce using rule 8 (type_definition_list -> type_definition .)
    IF              reduce using rule 8 (type_definition_list -> type_definition .)
    IDENTIFIER      shift and go to state 8

  ! IDENTIFIER      [ reduce using rule 8 (type_definition_list -> type_definition .) ]

    type_definition                shift and go to state 13
    type_definition_list           shift and go to state 25
    identifier                     shift and go to state 14

state 14

    (20) type_definition -> identifier . EQ ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON

    EQ              shift and go to state 26


state 15

    (3) program_heading -> PROGRAM identifier SEMICOLON .

    TYPE            reduce using rule 3 (program_heading -> PROGRAM identifier SEMICOLON .)
    VAR             reduce using rule 3 (program_heading -> PROGRAM identifier SEMICOLON .)
    FUNCTION        reduce using rule 3 (program_heading -> PROGRAM identifier SEMICOLON .)
    BEGIN           reduce using rule 3 (program_heading -> PROGRAM identifier SEMICOLON .)


state 16

    (2) program -> program_heading type_definition_part variable_declaration_part function_declaration_part . compound_statement_dot
    (43) compound_statement_dot -> . BEGIN statement_part END DOT

    BEGIN           shift and go to state 28

    compound_statement_dot         shift and go to state 27

state 17

    (12) function_declaration_part -> function_declaration . function_declaration_part
    (12) function_declaration_part -> . function_declaration function_declaration_part
    (13) function_declaration_part -> . empty
    (14) function_declaration -> . function_heading SEMICOLON block
    (1) empty -> .
    (15) function_heading -> . FUNCTION identifier LPAREN parameters RPAREN COLON simple_type_name

  ! shift/reduce conflict for FUNCTION resolved as shift
    BEGIN           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    IDENTIFIER      reduce using rule 1 (empty -> .)
    FUNCTION        shift and go to state 20

  ! FUNCTION        [ reduce using rule 1 (empty -> .) ]

    function_declaration           shift and go to state 17
    function_declaration_part      shift and go to state 29
    empty                          shift and go to state 18
    function_heading               shift and go to state 19

state 18

    (13) function_declaration_part -> empty .

    BEGIN           reduce using rule 13 (function_declaration_part -> empty .)
    WHILE           reduce using rule 13 (function_declaration_part -> empty .)
    IF              reduce using rule 13 (function_declaration_part -> empty .)
    IDENTIFIER      reduce using rule 13 (function_declaration_part -> empty .)
    FUNCTION        reduce using rule 13 (function_declaration_part -> empty .)


state 19

    (14) function_declaration -> function_heading . SEMICOLON block

    SEMICOLON       shift and go to state 30


state 20

    (15) function_heading -> FUNCTION . identifier LPAREN parameters RPAREN COLON simple_type_name
    (83) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8

    identifier                     shift and go to state 31

state 21

    (10) variable_declaration_part -> VAR variable_declaration_list .

    FUNCTION        reduce using rule 10 (variable_declaration_part -> VAR variable_declaration_list .)
    BEGIN           reduce using rule 10 (variable_declaration_part -> VAR variable_declaration_list .)
    WHILE           reduce using rule 10 (variable_declaration_part -> VAR variable_declaration_list .)
    IF              reduce using rule 10 (variable_declaration_part -> VAR variable_declaration_list .)
    IDENTIFIER      reduce using rule 10 (variable_declaration_part -> VAR variable_declaration_list .)


state 22

    (71) variable_declaration_list -> variable_declaration .
    (72) variable_declaration_list -> variable_declaration . variable_declaration_list
    (71) variable_declaration_list -> . variable_declaration
    (72) variable_declaration_list -> . variable_declaration variable_declaration_list
    (73) variable_declaration -> . identifier_list COLON simple_type_name SEMICOLON
    (74) variable_declaration -> . identifier COLON simple_type_name SEMICOLON
    (75) variable_declaration -> . identifier COLON identifier SEMICOLON
    (76) variable_declaration -> . identifier COLON ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON
    (77) identifier_list -> . identifier COMMA identifier_list
    (78) identifier_list -> . identifier
    (83) identifier -> . IDENTIFIER

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    FUNCTION        reduce using rule 71 (variable_declaration_list -> variable_declaration .)
    BEGIN           reduce using rule 71 (variable_declaration_list -> variable_declaration .)
    WHILE           reduce using rule 71 (variable_declaration_list -> variable_declaration .)
    IF              reduce using rule 71 (variable_declaration_list -> variable_declaration .)
    IDENTIFIER      shift and go to state 8

  ! IDENTIFIER      [ reduce using rule 71 (variable_declaration_list -> variable_declaration .) ]

    variable_declaration           shift and go to state 22
    variable_declaration_list      shift and go to state 32
    identifier_list                shift and go to state 23
    identifier                     shift and go to state 24

state 23

    (73) variable_declaration -> identifier_list . COLON simple_type_name SEMICOLON

    COLON           shift and go to state 33


state 24

    (74) variable_declaration -> identifier . COLON simple_type_name SEMICOLON
    (75) variable_declaration -> identifier . COLON identifier SEMICOLON
    (76) variable_declaration -> identifier . COLON ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON
    (77) identifier_list -> identifier . COMMA identifier_list
    (78) identifier_list -> identifier .

  ! shift/reduce conflict for COLON resolved as shift
    COLON           shift and go to state 34
    COMMA           shift and go to state 35

  ! COLON           [ reduce using rule 78 (identifier_list -> identifier .) ]


state 25

    (9) type_definition_list -> type_definition type_definition_list .

    VAR             reduce using rule 9 (type_definition_list -> type_definition type_definition_list .)
    FUNCTION        reduce using rule 9 (type_definition_list -> type_definition type_definition_list .)
    BEGIN           reduce using rule 9 (type_definition_list -> type_definition type_definition_list .)
    WHILE           reduce using rule 9 (type_definition_list -> type_definition type_definition_list .)
    IF              reduce using rule 9 (type_definition_list -> type_definition type_definition_list .)
    IDENTIFIER      reduce using rule 9 (type_definition_list -> type_definition type_definition_list .)


state 26

    (20) type_definition -> identifier EQ . ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON

    ARRAY           shift and go to state 36


state 27

    (2) program -> program_heading type_definition_part variable_declaration_part function_declaration_part compound_statement_dot .

    $end            reduce using rule 2 (program -> program_heading type_definition_part variable_declaration_part function_declaration_part compound_statement_dot .)


state 28

    (43) compound_statement_dot -> BEGIN . statement_part END DOT
    (21) statement_part -> . compound_statement
    (22) statement_part -> . assignment_list
    (23) statement_part -> . while_statement_list
    (24) statement_part -> . if_else_statement_list
    (25) statement_part -> . empty
    (42) compound_statement -> . BEGIN statement_part END SEMICOLON
    (44) assignment_list -> . assignment statement_part
    (26) while_statement_list -> . while_statement statement_part
    (27) if_else_statement_list -> . if_else_statement statement_part
    (1) empty -> .
    (45) assignment -> . identifier ASSIGNMENT expression ending
    (46) assignment -> . identifier LPARENARR term RPARENARR ASSIGNMENT expression ending
    (32) while_statement -> . WHILE expression DO single_statement_part
    (33) while_statement -> . WHILE expression DO BEGIN statement_part END SEMICOLON
    (40) if_else_statement -> . IF expression THEN then_statement
    (41) if_else_statement -> . IF expression THEN else_statement ELSE then_statement
    (83) identifier -> . IDENTIFIER

    BEGIN           shift and go to state 37
    END             reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    IDENTIFIER      shift and go to state 8

    statement_part                 shift and go to state 38
    compound_statement             shift and go to state 39
    assignment_list                shift and go to state 40
    while_statement_list           shift and go to state 41
    if_else_statement_list         shift and go to state 42
    empty                          shift and go to state 43
    assignment                     shift and go to state 44
    while_statement                shift and go to state 45
    if_else_statement              shift and go to state 46
    identifier                     shift and go to state 47

state 29

    (12) function_declaration_part -> function_declaration function_declaration_part .

    BEGIN           reduce using rule 12 (function_declaration_part -> function_declaration function_declaration_part .)
    WHILE           reduce using rule 12 (function_declaration_part -> function_declaration function_declaration_part .)
    IF              reduce using rule 12 (function_declaration_part -> function_declaration function_declaration_part .)
    IDENTIFIER      reduce using rule 12 (function_declaration_part -> function_declaration function_declaration_part .)
    FUNCTION        reduce using rule 12 (function_declaration_part -> function_declaration function_declaration_part .)


state 30

    (14) function_declaration -> function_heading SEMICOLON . block
    (5) block -> . declaration_part statement_part
    (4) declaration_part -> . type_definition_part variable_declaration_part function_declaration_part
    (6) type_definition_part -> . TYPE type_definition_list
    (7) type_definition_part -> . empty
    (1) empty -> .

    TYPE            shift and go to state 5
    VAR             reduce using rule 1 (empty -> .)
    FUNCTION        reduce using rule 1 (empty -> .)
    BEGIN           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    IDENTIFIER      reduce using rule 1 (empty -> .)

    block                          shift and go to state 50
    declaration_part               shift and go to state 51
    type_definition_part           shift and go to state 52
    empty                          shift and go to state 6

state 31

    (15) function_heading -> FUNCTION identifier . LPAREN parameters RPAREN COLON simple_type_name

    LPAREN          shift and go to state 53


state 32

    (72) variable_declaration_list -> variable_declaration variable_declaration_list .

    FUNCTION        reduce using rule 72 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    BEGIN           reduce using rule 72 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    WHILE           reduce using rule 72 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    IF              reduce using rule 72 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    IDENTIFIER      reduce using rule 72 (variable_declaration_list -> variable_declaration variable_declaration_list .)


state 33

    (73) variable_declaration -> identifier_list COLON . simple_type_name SEMICOLON
    (79) simple_type_name -> . SSTRING
    (80) simple_type_name -> . SCHAR
    (81) simple_type_name -> . SREAL
    (82) simple_type_name -> . SINTEGER

    SSTRING         shift and go to state 55
    SCHAR           shift and go to state 56
    SREAL           shift and go to state 57
    SINTEGER        shift and go to state 58

    simple_type_name               shift and go to state 54

state 34

    (74) variable_declaration -> identifier COLON . simple_type_name SEMICOLON
    (75) variable_declaration -> identifier COLON . identifier SEMICOLON
    (76) variable_declaration -> identifier COLON . ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON
    (79) simple_type_name -> . SSTRING
    (80) simple_type_name -> . SCHAR
    (81) simple_type_name -> . SREAL
    (82) simple_type_name -> . SINTEGER
    (83) identifier -> . IDENTIFIER

    ARRAY           shift and go to state 61
    SSTRING         shift and go to state 55
    SCHAR           shift and go to state 56
    SREAL           shift and go to state 57
    SINTEGER        shift and go to state 58
    IDENTIFIER      shift and go to state 8

    identifier                     shift and go to state 59
    simple_type_name               shift and go to state 60

state 35

    (77) identifier_list -> identifier COMMA . identifier_list
    (77) identifier_list -> . identifier COMMA identifier_list
    (78) identifier_list -> . identifier
    (83) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8

    identifier                     shift and go to state 62
    identifier_list                shift and go to state 63

state 36

    (20) type_definition -> identifier EQ ARRAY . LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON

    LPARENARR       shift and go to state 64


state 37

    (42) compound_statement -> BEGIN . statement_part END SEMICOLON
    (21) statement_part -> . compound_statement
    (22) statement_part -> . assignment_list
    (23) statement_part -> . while_statement_list
    (24) statement_part -> . if_else_statement_list
    (25) statement_part -> . empty
    (42) compound_statement -> . BEGIN statement_part END SEMICOLON
    (44) assignment_list -> . assignment statement_part
    (26) while_statement_list -> . while_statement statement_part
    (27) if_else_statement_list -> . if_else_statement statement_part
    (1) empty -> .
    (45) assignment -> . identifier ASSIGNMENT expression ending
    (46) assignment -> . identifier LPARENARR term RPARENARR ASSIGNMENT expression ending
    (32) while_statement -> . WHILE expression DO single_statement_part
    (33) while_statement -> . WHILE expression DO BEGIN statement_part END SEMICOLON
    (40) if_else_statement -> . IF expression THEN then_statement
    (41) if_else_statement -> . IF expression THEN else_statement ELSE then_statement
    (83) identifier -> . IDENTIFIER

    BEGIN           shift and go to state 37
    END             reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    IDENTIFIER      shift and go to state 8

    statement_part                 shift and go to state 65
    compound_statement             shift and go to state 39
    assignment_list                shift and go to state 40
    while_statement_list           shift and go to state 41
    if_else_statement_list         shift and go to state 42
    empty                          shift and go to state 43
    assignment                     shift and go to state 44
    while_statement                shift and go to state 45
    if_else_statement              shift and go to state 46
    identifier                     shift and go to state 47

state 38

    (43) compound_statement_dot -> BEGIN statement_part . END DOT

    END             shift and go to state 66


state 39

    (21) statement_part -> compound_statement .

    END             reduce using rule 21 (statement_part -> compound_statement .)
    BEGIN           reduce using rule 21 (statement_part -> compound_statement .)
    WHILE           reduce using rule 21 (statement_part -> compound_statement .)
    IF              reduce using rule 21 (statement_part -> compound_statement .)
    IDENTIFIER      reduce using rule 21 (statement_part -> compound_statement .)
    FUNCTION        reduce using rule 21 (statement_part -> compound_statement .)


state 40

    (22) statement_part -> assignment_list .

    END             reduce using rule 22 (statement_part -> assignment_list .)
    BEGIN           reduce using rule 22 (statement_part -> assignment_list .)
    WHILE           reduce using rule 22 (statement_part -> assignment_list .)
    IF              reduce using rule 22 (statement_part -> assignment_list .)
    IDENTIFIER      reduce using rule 22 (statement_part -> assignment_list .)
    FUNCTION        reduce using rule 22 (statement_part -> assignment_list .)


state 41

    (23) statement_part -> while_statement_list .

    END             reduce using rule 23 (statement_part -> while_statement_list .)
    BEGIN           reduce using rule 23 (statement_part -> while_statement_list .)
    WHILE           reduce using rule 23 (statement_part -> while_statement_list .)
    IF              reduce using rule 23 (statement_part -> while_statement_list .)
    IDENTIFIER      reduce using rule 23 (statement_part -> while_statement_list .)
    FUNCTION        reduce using rule 23 (statement_part -> while_statement_list .)


state 42

    (24) statement_part -> if_else_statement_list .

    END             reduce using rule 24 (statement_part -> if_else_statement_list .)
    BEGIN           reduce using rule 24 (statement_part -> if_else_statement_list .)
    WHILE           reduce using rule 24 (statement_part -> if_else_statement_list .)
    IF              reduce using rule 24 (statement_part -> if_else_statement_list .)
    IDENTIFIER      reduce using rule 24 (statement_part -> if_else_statement_list .)
    FUNCTION        reduce using rule 24 (statement_part -> if_else_statement_list .)


state 43

    (25) statement_part -> empty .

    END             reduce using rule 25 (statement_part -> empty .)
    BEGIN           reduce using rule 25 (statement_part -> empty .)
    WHILE           reduce using rule 25 (statement_part -> empty .)
    IF              reduce using rule 25 (statement_part -> empty .)
    IDENTIFIER      reduce using rule 25 (statement_part -> empty .)
    FUNCTION        reduce using rule 25 (statement_part -> empty .)


state 44

    (44) assignment_list -> assignment . statement_part
    (21) statement_part -> . compound_statement
    (22) statement_part -> . assignment_list
    (23) statement_part -> . while_statement_list
    (24) statement_part -> . if_else_statement_list
    (25) statement_part -> . empty
    (42) compound_statement -> . BEGIN statement_part END SEMICOLON
    (44) assignment_list -> . assignment statement_part
    (26) while_statement_list -> . while_statement statement_part
    (27) if_else_statement_list -> . if_else_statement statement_part
    (1) empty -> .
    (45) assignment -> . identifier ASSIGNMENT expression ending
    (46) assignment -> . identifier LPARENARR term RPARENARR ASSIGNMENT expression ending
    (32) while_statement -> . WHILE expression DO single_statement_part
    (33) while_statement -> . WHILE expression DO BEGIN statement_part END SEMICOLON
    (40) if_else_statement -> . IF expression THEN then_statement
    (41) if_else_statement -> . IF expression THEN else_statement ELSE then_statement
    (83) identifier -> . IDENTIFIER

  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    BEGIN           shift and go to state 37
    END             reduce using rule 1 (empty -> .)
    FUNCTION        reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    IDENTIFIER      shift and go to state 8

  ! BEGIN           [ reduce using rule 1 (empty -> .) ]
  ! WHILE           [ reduce using rule 1 (empty -> .) ]
  ! IF              [ reduce using rule 1 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 1 (empty -> .) ]

    assignment                     shift and go to state 44
    statement_part                 shift and go to state 67
    compound_statement             shift and go to state 39
    assignment_list                shift and go to state 40
    while_statement_list           shift and go to state 41
    if_else_statement_list         shift and go to state 42
    empty                          shift and go to state 43
    while_statement                shift and go to state 45
    if_else_statement              shift and go to state 46
    identifier                     shift and go to state 47

state 45

    (26) while_statement_list -> while_statement . statement_part
    (21) statement_part -> . compound_statement
    (22) statement_part -> . assignment_list
    (23) statement_part -> . while_statement_list
    (24) statement_part -> . if_else_statement_list
    (25) statement_part -> . empty
    (42) compound_statement -> . BEGIN statement_part END SEMICOLON
    (44) assignment_list -> . assignment statement_part
    (26) while_statement_list -> . while_statement statement_part
    (27) if_else_statement_list -> . if_else_statement statement_part
    (1) empty -> .
    (45) assignment -> . identifier ASSIGNMENT expression ending
    (46) assignment -> . identifier LPARENARR term RPARENARR ASSIGNMENT expression ending
    (32) while_statement -> . WHILE expression DO single_statement_part
    (33) while_statement -> . WHILE expression DO BEGIN statement_part END SEMICOLON
    (40) if_else_statement -> . IF expression THEN then_statement
    (41) if_else_statement -> . IF expression THEN else_statement ELSE then_statement
    (83) identifier -> . IDENTIFIER

  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    BEGIN           shift and go to state 37
    END             reduce using rule 1 (empty -> .)
    FUNCTION        reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    IDENTIFIER      shift and go to state 8

  ! BEGIN           [ reduce using rule 1 (empty -> .) ]
  ! WHILE           [ reduce using rule 1 (empty -> .) ]
  ! IF              [ reduce using rule 1 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 1 (empty -> .) ]

    while_statement                shift and go to state 45
    statement_part                 shift and go to state 68
    compound_statement             shift and go to state 39
    assignment_list                shift and go to state 40
    while_statement_list           shift and go to state 41
    if_else_statement_list         shift and go to state 42
    empty                          shift and go to state 43
    assignment                     shift and go to state 44
    if_else_statement              shift and go to state 46
    identifier                     shift and go to state 47

state 46

    (27) if_else_statement_list -> if_else_statement . statement_part
    (21) statement_part -> . compound_statement
    (22) statement_part -> . assignment_list
    (23) statement_part -> . while_statement_list
    (24) statement_part -> . if_else_statement_list
    (25) statement_part -> . empty
    (42) compound_statement -> . BEGIN statement_part END SEMICOLON
    (44) assignment_list -> . assignment statement_part
    (26) while_statement_list -> . while_statement statement_part
    (27) if_else_statement_list -> . if_else_statement statement_part
    (1) empty -> .
    (45) assignment -> . identifier ASSIGNMENT expression ending
    (46) assignment -> . identifier LPARENARR term RPARENARR ASSIGNMENT expression ending
    (32) while_statement -> . WHILE expression DO single_statement_part
    (33) while_statement -> . WHILE expression DO BEGIN statement_part END SEMICOLON
    (40) if_else_statement -> . IF expression THEN then_statement
    (41) if_else_statement -> . IF expression THEN else_statement ELSE then_statement
    (83) identifier -> . IDENTIFIER

  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    BEGIN           shift and go to state 37
    END             reduce using rule 1 (empty -> .)
    FUNCTION        reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    IDENTIFIER      shift and go to state 8

  ! BEGIN           [ reduce using rule 1 (empty -> .) ]
  ! WHILE           [ reduce using rule 1 (empty -> .) ]
  ! IF              [ reduce using rule 1 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 1 (empty -> .) ]

    if_else_statement              shift and go to state 46
    statement_part                 shift and go to state 69
    compound_statement             shift and go to state 39
    assignment_list                shift and go to state 40
    while_statement_list           shift and go to state 41
    if_else_statement_list         shift and go to state 42
    empty                          shift and go to state 43
    assignment                     shift and go to state 44
    while_statement                shift and go to state 45
    identifier                     shift and go to state 47

state 47

    (45) assignment -> identifier . ASSIGNMENT expression ending
    (46) assignment -> identifier . LPARENARR term RPARENARR ASSIGNMENT expression ending

    ASSIGNMENT      shift and go to state 70
    LPARENARR       shift and go to state 71


state 48

    (32) while_statement -> WHILE . expression DO single_statement_part
    (33) while_statement -> WHILE . expression DO BEGIN statement_part END SEMICOLON
    (47) expression -> . term
    (48) expression -> . expression sign term
    (49) expression -> . expression and_or expression
    (60) term -> . integer
    (61) term -> . real
    (62) term -> . char
    (63) term -> . string
    (64) term -> . function_call
    (65) term -> . identifier
    (66) integer -> . INTEGER
    (67) real -> . REAL
    (69) char -> . CHAR
    (68) string -> . STRING
    (70) function_call -> . identifier LPAREN identifier_list RPAREN
    (83) identifier -> . IDENTIFIER

    INTEGER         shift and go to state 80
    REAL            shift and go to state 81
    CHAR            shift and go to state 82
    STRING          shift and go to state 83
    IDENTIFIER      shift and go to state 8

    expression                     shift and go to state 72
    term                           shift and go to state 73
    integer                        shift and go to state 74
    real                           shift and go to state 75
    char                           shift and go to state 76
    string                         shift and go to state 77
    function_call                  shift and go to state 78
    identifier                     shift and go to state 79

state 49

    (40) if_else_statement -> IF . expression THEN then_statement
    (41) if_else_statement -> IF . expression THEN else_statement ELSE then_statement
    (47) expression -> . term
    (48) expression -> . expression sign term
    (49) expression -> . expression and_or expression
    (60) term -> . integer
    (61) term -> . real
    (62) term -> . char
    (63) term -> . string
    (64) term -> . function_call
    (65) term -> . identifier
    (66) integer -> . INTEGER
    (67) real -> . REAL
    (69) char -> . CHAR
    (68) string -> . STRING
    (70) function_call -> . identifier LPAREN identifier_list RPAREN
    (83) identifier -> . IDENTIFIER

    INTEGER         shift and go to state 80
    REAL            shift and go to state 81
    CHAR            shift and go to state 82
    STRING          shift and go to state 83
    IDENTIFIER      shift and go to state 8

    expression                     shift and go to state 84
    term                           shift and go to state 73
    integer                        shift and go to state 74
    real                           shift and go to state 75
    char                           shift and go to state 76
    string                         shift and go to state 77
    function_call                  shift and go to state 78
    identifier                     shift and go to state 79

state 50

    (14) function_declaration -> function_heading SEMICOLON block .

    FUNCTION        reduce using rule 14 (function_declaration -> function_heading SEMICOLON block .)
    BEGIN           reduce using rule 14 (function_declaration -> function_heading SEMICOLON block .)
    WHILE           reduce using rule 14 (function_declaration -> function_heading SEMICOLON block .)
    IF              reduce using rule 14 (function_declaration -> function_heading SEMICOLON block .)
    IDENTIFIER      reduce using rule 14 (function_declaration -> function_heading SEMICOLON block .)


state 51

    (5) block -> declaration_part . statement_part
    (21) statement_part -> . compound_statement
    (22) statement_part -> . assignment_list
    (23) statement_part -> . while_statement_list
    (24) statement_part -> . if_else_statement_list
    (25) statement_part -> . empty
    (42) compound_statement -> . BEGIN statement_part END SEMICOLON
    (44) assignment_list -> . assignment statement_part
    (26) while_statement_list -> . while_statement statement_part
    (27) if_else_statement_list -> . if_else_statement statement_part
    (1) empty -> .
    (45) assignment -> . identifier ASSIGNMENT expression ending
    (46) assignment -> . identifier LPARENARR term RPARENARR ASSIGNMENT expression ending
    (32) while_statement -> . WHILE expression DO single_statement_part
    (33) while_statement -> . WHILE expression DO BEGIN statement_part END SEMICOLON
    (40) if_else_statement -> . IF expression THEN then_statement
    (41) if_else_statement -> . IF expression THEN else_statement ELSE then_statement
    (83) identifier -> . IDENTIFIER

  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    BEGIN           shift and go to state 37
    FUNCTION        reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    IDENTIFIER      shift and go to state 8

  ! BEGIN           [ reduce using rule 1 (empty -> .) ]
  ! WHILE           [ reduce using rule 1 (empty -> .) ]
  ! IF              [ reduce using rule 1 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 1 (empty -> .) ]

    statement_part                 shift and go to state 85
    compound_statement             shift and go to state 39
    assignment_list                shift and go to state 40
    while_statement_list           shift and go to state 41
    if_else_statement_list         shift and go to state 42
    empty                          shift and go to state 43
    assignment                     shift and go to state 44
    while_statement                shift and go to state 45
    if_else_statement              shift and go to state 46
    identifier                     shift and go to state 47

state 52

    (4) declaration_part -> type_definition_part . variable_declaration_part function_declaration_part
    (10) variable_declaration_part -> . VAR variable_declaration_list
    (11) variable_declaration_part -> . empty
    (1) empty -> .

    VAR             shift and go to state 10
    FUNCTION        reduce using rule 1 (empty -> .)
    BEGIN           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    IDENTIFIER      reduce using rule 1 (empty -> .)

    variable_declaration_part      shift and go to state 86
    empty                          shift and go to state 11

state 53

    (15) function_heading -> FUNCTION identifier LPAREN . parameters RPAREN COLON simple_type_name
    (16) parameters -> . names_list COLON simple_type_name
    (17) parameters -> . names_list COLON simple_type_name SEMICOLON parameters
    (18) names_list -> . identifier
    (19) names_list -> . identifier COMMA names_list
    (83) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8

    identifier                     shift and go to state 87
    parameters                     shift and go to state 88
    names_list                     shift and go to state 89

state 54

    (73) variable_declaration -> identifier_list COLON simple_type_name . SEMICOLON

    SEMICOLON       shift and go to state 90


state 55

    (79) simple_type_name -> SSTRING .

    SEMICOLON       reduce using rule 79 (simple_type_name -> SSTRING .)
    RPAREN          reduce using rule 79 (simple_type_name -> SSTRING .)


state 56

    (80) simple_type_name -> SCHAR .

    SEMICOLON       reduce using rule 80 (simple_type_name -> SCHAR .)
    RPAREN          reduce using rule 80 (simple_type_name -> SCHAR .)


state 57

    (81) simple_type_name -> SREAL .

    SEMICOLON       reduce using rule 81 (simple_type_name -> SREAL .)
    RPAREN          reduce using rule 81 (simple_type_name -> SREAL .)


state 58

    (82) simple_type_name -> SINTEGER .

    SEMICOLON       reduce using rule 82 (simple_type_name -> SINTEGER .)
    RPAREN          reduce using rule 82 (simple_type_name -> SINTEGER .)


state 59

    (75) variable_declaration -> identifier COLON identifier . SEMICOLON

    SEMICOLON       shift and go to state 91


state 60

    (74) variable_declaration -> identifier COLON simple_type_name . SEMICOLON

    SEMICOLON       shift and go to state 92


state 61

    (76) variable_declaration -> identifier COLON ARRAY . LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON

    LPARENARR       shift and go to state 93


state 62

    (77) identifier_list -> identifier . COMMA identifier_list
    (78) identifier_list -> identifier .

    COMMA           shift and go to state 35
    COLON           reduce using rule 78 (identifier_list -> identifier .)
    RPAREN          reduce using rule 78 (identifier_list -> identifier .)


state 63

    (77) identifier_list -> identifier COMMA identifier_list .

    COLON           reduce using rule 77 (identifier_list -> identifier COMMA identifier_list .)
    RPAREN          reduce using rule 77 (identifier_list -> identifier COMMA identifier_list .)


state 64

    (20) type_definition -> identifier EQ ARRAY LPARENARR . INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON

    INTEGER         shift and go to state 94


state 65

    (42) compound_statement -> BEGIN statement_part . END SEMICOLON

    END             shift and go to state 95


state 66

    (43) compound_statement_dot -> BEGIN statement_part END . DOT

    DOT             shift and go to state 96


state 67

    (44) assignment_list -> assignment statement_part .

    END             reduce using rule 44 (assignment_list -> assignment statement_part .)
    BEGIN           reduce using rule 44 (assignment_list -> assignment statement_part .)
    WHILE           reduce using rule 44 (assignment_list -> assignment statement_part .)
    IF              reduce using rule 44 (assignment_list -> assignment statement_part .)
    IDENTIFIER      reduce using rule 44 (assignment_list -> assignment statement_part .)
    FUNCTION        reduce using rule 44 (assignment_list -> assignment statement_part .)


state 68

    (26) while_statement_list -> while_statement statement_part .

    END             reduce using rule 26 (while_statement_list -> while_statement statement_part .)
    BEGIN           reduce using rule 26 (while_statement_list -> while_statement statement_part .)
    WHILE           reduce using rule 26 (while_statement_list -> while_statement statement_part .)
    IF              reduce using rule 26 (while_statement_list -> while_statement statement_part .)
    IDENTIFIER      reduce using rule 26 (while_statement_list -> while_statement statement_part .)
    FUNCTION        reduce using rule 26 (while_statement_list -> while_statement statement_part .)


state 69

    (27) if_else_statement_list -> if_else_statement statement_part .

    END             reduce using rule 27 (if_else_statement_list -> if_else_statement statement_part .)
    BEGIN           reduce using rule 27 (if_else_statement_list -> if_else_statement statement_part .)
    WHILE           reduce using rule 27 (if_else_statement_list -> if_else_statement statement_part .)
    IF              reduce using rule 27 (if_else_statement_list -> if_else_statement statement_part .)
    IDENTIFIER      reduce using rule 27 (if_else_statement_list -> if_else_statement statement_part .)
    FUNCTION        reduce using rule 27 (if_else_statement_list -> if_else_statement statement_part .)


state 70

    (45) assignment -> identifier ASSIGNMENT . expression ending
    (47) expression -> . term
    (48) expression -> . expression sign term
    (49) expression -> . expression and_or expression
    (60) term -> . integer
    (61) term -> . real
    (62) term -> . char
    (63) term -> . string
    (64) term -> . function_call
    (65) term -> . identifier
    (66) integer -> . INTEGER
    (67) real -> . REAL
    (69) char -> . CHAR
    (68) string -> . STRING
    (70) function_call -> . identifier LPAREN identifier_list RPAREN
    (83) identifier -> . IDENTIFIER

    INTEGER         shift and go to state 80
    REAL            shift and go to state 81
    CHAR            shift and go to state 82
    STRING          shift and go to state 83
    IDENTIFIER      shift and go to state 8

    identifier                     shift and go to state 79
    expression                     shift and go to state 97
    term                           shift and go to state 73
    integer                        shift and go to state 74
    real                           shift and go to state 75
    char                           shift and go to state 76
    string                         shift and go to state 77
    function_call                  shift and go to state 78

state 71

    (46) assignment -> identifier LPARENARR . term RPARENARR ASSIGNMENT expression ending
    (60) term -> . integer
    (61) term -> . real
    (62) term -> . char
    (63) term -> . string
    (64) term -> . function_call
    (65) term -> . identifier
    (66) integer -> . INTEGER
    (67) real -> . REAL
    (69) char -> . CHAR
    (68) string -> . STRING
    (70) function_call -> . identifier LPAREN identifier_list RPAREN
    (83) identifier -> . IDENTIFIER

    INTEGER         shift and go to state 80
    REAL            shift and go to state 81
    CHAR            shift and go to state 82
    STRING          shift and go to state 83
    IDENTIFIER      shift and go to state 8

    identifier                     shift and go to state 79
    term                           shift and go to state 98
    integer                        shift and go to state 74
    real                           shift and go to state 75
    char                           shift and go to state 76
    string                         shift and go to state 77
    function_call                  shift and go to state 78

state 72

    (32) while_statement -> WHILE expression . DO single_statement_part
    (33) while_statement -> WHILE expression . DO BEGIN statement_part END SEMICOLON
    (48) expression -> expression . sign term
    (49) expression -> expression . and_or expression
    (52) sign -> . PLUS
    (53) sign -> . MINUS
    (54) sign -> . EQ
    (55) sign -> . NEQ
    (56) sign -> . GT
    (57) sign -> . LT
    (58) sign -> . GTE
    (59) sign -> . LTE
    (50) and_or -> . AND
    (51) and_or -> . OR

    DO              shift and go to state 99
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    EQ              shift and go to state 104
    NEQ             shift and go to state 105
    GT              shift and go to state 106
    LT              shift and go to state 107
    GTE             shift and go to state 108
    LTE             shift and go to state 109
    AND             shift and go to state 110
    OR              shift and go to state 111

    sign                           shift and go to state 100
    and_or                         shift and go to state 101

state 73

    (47) expression -> term .

    DO              reduce using rule 47 (expression -> term .)
    PLUS            reduce using rule 47 (expression -> term .)
    MINUS           reduce using rule 47 (expression -> term .)
    EQ              reduce using rule 47 (expression -> term .)
    NEQ             reduce using rule 47 (expression -> term .)
    GT              reduce using rule 47 (expression -> term .)
    LT              reduce using rule 47 (expression -> term .)
    GTE             reduce using rule 47 (expression -> term .)
    LTE             reduce using rule 47 (expression -> term .)
    AND             reduce using rule 47 (expression -> term .)
    OR              reduce using rule 47 (expression -> term .)
    THEN            reduce using rule 47 (expression -> term .)
    SEMICOLON       reduce using rule 47 (expression -> term .)
    BEGIN           reduce using rule 47 (expression -> term .)
    WHILE           reduce using rule 47 (expression -> term .)
    IF              reduce using rule 47 (expression -> term .)
    IDENTIFIER      reduce using rule 47 (expression -> term .)
    END             reduce using rule 47 (expression -> term .)
    FUNCTION        reduce using rule 47 (expression -> term .)
    ELSE            reduce using rule 47 (expression -> term .)


state 74

    (60) term -> integer .

    DO              reduce using rule 60 (term -> integer .)
    PLUS            reduce using rule 60 (term -> integer .)
    MINUS           reduce using rule 60 (term -> integer .)
    EQ              reduce using rule 60 (term -> integer .)
    NEQ             reduce using rule 60 (term -> integer .)
    GT              reduce using rule 60 (term -> integer .)
    LT              reduce using rule 60 (term -> integer .)
    GTE             reduce using rule 60 (term -> integer .)
    LTE             reduce using rule 60 (term -> integer .)
    AND             reduce using rule 60 (term -> integer .)
    OR              reduce using rule 60 (term -> integer .)
    THEN            reduce using rule 60 (term -> integer .)
    SEMICOLON       reduce using rule 60 (term -> integer .)
    BEGIN           reduce using rule 60 (term -> integer .)
    WHILE           reduce using rule 60 (term -> integer .)
    IF              reduce using rule 60 (term -> integer .)
    IDENTIFIER      reduce using rule 60 (term -> integer .)
    END             reduce using rule 60 (term -> integer .)
    FUNCTION        reduce using rule 60 (term -> integer .)
    ELSE            reduce using rule 60 (term -> integer .)
    RPARENARR       reduce using rule 60 (term -> integer .)


state 75

    (61) term -> real .

    DO              reduce using rule 61 (term -> real .)
    PLUS            reduce using rule 61 (term -> real .)
    MINUS           reduce using rule 61 (term -> real .)
    EQ              reduce using rule 61 (term -> real .)
    NEQ             reduce using rule 61 (term -> real .)
    GT              reduce using rule 61 (term -> real .)
    LT              reduce using rule 61 (term -> real .)
    GTE             reduce using rule 61 (term -> real .)
    LTE             reduce using rule 61 (term -> real .)
    AND             reduce using rule 61 (term -> real .)
    OR              reduce using rule 61 (term -> real .)
    THEN            reduce using rule 61 (term -> real .)
    SEMICOLON       reduce using rule 61 (term -> real .)
    BEGIN           reduce using rule 61 (term -> real .)
    WHILE           reduce using rule 61 (term -> real .)
    IF              reduce using rule 61 (term -> real .)
    IDENTIFIER      reduce using rule 61 (term -> real .)
    END             reduce using rule 61 (term -> real .)
    FUNCTION        reduce using rule 61 (term -> real .)
    ELSE            reduce using rule 61 (term -> real .)
    RPARENARR       reduce using rule 61 (term -> real .)


state 76

    (62) term -> char .

    DO              reduce using rule 62 (term -> char .)
    PLUS            reduce using rule 62 (term -> char .)
    MINUS           reduce using rule 62 (term -> char .)
    EQ              reduce using rule 62 (term -> char .)
    NEQ             reduce using rule 62 (term -> char .)
    GT              reduce using rule 62 (term -> char .)
    LT              reduce using rule 62 (term -> char .)
    GTE             reduce using rule 62 (term -> char .)
    LTE             reduce using rule 62 (term -> char .)
    AND             reduce using rule 62 (term -> char .)
    OR              reduce using rule 62 (term -> char .)
    THEN            reduce using rule 62 (term -> char .)
    SEMICOLON       reduce using rule 62 (term -> char .)
    BEGIN           reduce using rule 62 (term -> char .)
    WHILE           reduce using rule 62 (term -> char .)
    IF              reduce using rule 62 (term -> char .)
    IDENTIFIER      reduce using rule 62 (term -> char .)
    END             reduce using rule 62 (term -> char .)
    FUNCTION        reduce using rule 62 (term -> char .)
    ELSE            reduce using rule 62 (term -> char .)
    RPARENARR       reduce using rule 62 (term -> char .)


state 77

    (63) term -> string .

    DO              reduce using rule 63 (term -> string .)
    PLUS            reduce using rule 63 (term -> string .)
    MINUS           reduce using rule 63 (term -> string .)
    EQ              reduce using rule 63 (term -> string .)
    NEQ             reduce using rule 63 (term -> string .)
    GT              reduce using rule 63 (term -> string .)
    LT              reduce using rule 63 (term -> string .)
    GTE             reduce using rule 63 (term -> string .)
    LTE             reduce using rule 63 (term -> string .)
    AND             reduce using rule 63 (term -> string .)
    OR              reduce using rule 63 (term -> string .)
    THEN            reduce using rule 63 (term -> string .)
    SEMICOLON       reduce using rule 63 (term -> string .)
    BEGIN           reduce using rule 63 (term -> string .)
    WHILE           reduce using rule 63 (term -> string .)
    IF              reduce using rule 63 (term -> string .)
    IDENTIFIER      reduce using rule 63 (term -> string .)
    END             reduce using rule 63 (term -> string .)
    FUNCTION        reduce using rule 63 (term -> string .)
    ELSE            reduce using rule 63 (term -> string .)
    RPARENARR       reduce using rule 63 (term -> string .)


state 78

    (64) term -> function_call .

    DO              reduce using rule 64 (term -> function_call .)
    PLUS            reduce using rule 64 (term -> function_call .)
    MINUS           reduce using rule 64 (term -> function_call .)
    EQ              reduce using rule 64 (term -> function_call .)
    NEQ             reduce using rule 64 (term -> function_call .)
    GT              reduce using rule 64 (term -> function_call .)
    LT              reduce using rule 64 (term -> function_call .)
    GTE             reduce using rule 64 (term -> function_call .)
    LTE             reduce using rule 64 (term -> function_call .)
    AND             reduce using rule 64 (term -> function_call .)
    OR              reduce using rule 64 (term -> function_call .)
    THEN            reduce using rule 64 (term -> function_call .)
    SEMICOLON       reduce using rule 64 (term -> function_call .)
    BEGIN           reduce using rule 64 (term -> function_call .)
    WHILE           reduce using rule 64 (term -> function_call .)
    IF              reduce using rule 64 (term -> function_call .)
    IDENTIFIER      reduce using rule 64 (term -> function_call .)
    END             reduce using rule 64 (term -> function_call .)
    FUNCTION        reduce using rule 64 (term -> function_call .)
    ELSE            reduce using rule 64 (term -> function_call .)
    RPARENARR       reduce using rule 64 (term -> function_call .)


state 79

    (65) term -> identifier .
    (70) function_call -> identifier . LPAREN identifier_list RPAREN

    DO              reduce using rule 65 (term -> identifier .)
    PLUS            reduce using rule 65 (term -> identifier .)
    MINUS           reduce using rule 65 (term -> identifier .)
    EQ              reduce using rule 65 (term -> identifier .)
    NEQ             reduce using rule 65 (term -> identifier .)
    GT              reduce using rule 65 (term -> identifier .)
    LT              reduce using rule 65 (term -> identifier .)
    GTE             reduce using rule 65 (term -> identifier .)
    LTE             reduce using rule 65 (term -> identifier .)
    AND             reduce using rule 65 (term -> identifier .)
    OR              reduce using rule 65 (term -> identifier .)
    THEN            reduce using rule 65 (term -> identifier .)
    SEMICOLON       reduce using rule 65 (term -> identifier .)
    BEGIN           reduce using rule 65 (term -> identifier .)
    WHILE           reduce using rule 65 (term -> identifier .)
    IF              reduce using rule 65 (term -> identifier .)
    IDENTIFIER      reduce using rule 65 (term -> identifier .)
    END             reduce using rule 65 (term -> identifier .)
    FUNCTION        reduce using rule 65 (term -> identifier .)
    ELSE            reduce using rule 65 (term -> identifier .)
    RPARENARR       reduce using rule 65 (term -> identifier .)
    LPAREN          shift and go to state 112


state 80

    (66) integer -> INTEGER .

    DO              reduce using rule 66 (integer -> INTEGER .)
    PLUS            reduce using rule 66 (integer -> INTEGER .)
    MINUS           reduce using rule 66 (integer -> INTEGER .)
    EQ              reduce using rule 66 (integer -> INTEGER .)
    NEQ             reduce using rule 66 (integer -> INTEGER .)
    GT              reduce using rule 66 (integer -> INTEGER .)
    LT              reduce using rule 66 (integer -> INTEGER .)
    GTE             reduce using rule 66 (integer -> INTEGER .)
    LTE             reduce using rule 66 (integer -> INTEGER .)
    AND             reduce using rule 66 (integer -> INTEGER .)
    OR              reduce using rule 66 (integer -> INTEGER .)
    THEN            reduce using rule 66 (integer -> INTEGER .)
    SEMICOLON       reduce using rule 66 (integer -> INTEGER .)
    BEGIN           reduce using rule 66 (integer -> INTEGER .)
    WHILE           reduce using rule 66 (integer -> INTEGER .)
    IF              reduce using rule 66 (integer -> INTEGER .)
    IDENTIFIER      reduce using rule 66 (integer -> INTEGER .)
    END             reduce using rule 66 (integer -> INTEGER .)
    FUNCTION        reduce using rule 66 (integer -> INTEGER .)
    ELSE            reduce using rule 66 (integer -> INTEGER .)
    RPARENARR       reduce using rule 66 (integer -> INTEGER .)


state 81

    (67) real -> REAL .

    DO              reduce using rule 67 (real -> REAL .)
    PLUS            reduce using rule 67 (real -> REAL .)
    MINUS           reduce using rule 67 (real -> REAL .)
    EQ              reduce using rule 67 (real -> REAL .)
    NEQ             reduce using rule 67 (real -> REAL .)
    GT              reduce using rule 67 (real -> REAL .)
    LT              reduce using rule 67 (real -> REAL .)
    GTE             reduce using rule 67 (real -> REAL .)
    LTE             reduce using rule 67 (real -> REAL .)
    AND             reduce using rule 67 (real -> REAL .)
    OR              reduce using rule 67 (real -> REAL .)
    THEN            reduce using rule 67 (real -> REAL .)
    SEMICOLON       reduce using rule 67 (real -> REAL .)
    BEGIN           reduce using rule 67 (real -> REAL .)
    WHILE           reduce using rule 67 (real -> REAL .)
    IF              reduce using rule 67 (real -> REAL .)
    IDENTIFIER      reduce using rule 67 (real -> REAL .)
    END             reduce using rule 67 (real -> REAL .)
    FUNCTION        reduce using rule 67 (real -> REAL .)
    ELSE            reduce using rule 67 (real -> REAL .)
    RPARENARR       reduce using rule 67 (real -> REAL .)


state 82

    (69) char -> CHAR .

    DO              reduce using rule 69 (char -> CHAR .)
    PLUS            reduce using rule 69 (char -> CHAR .)
    MINUS           reduce using rule 69 (char -> CHAR .)
    EQ              reduce using rule 69 (char -> CHAR .)
    NEQ             reduce using rule 69 (char -> CHAR .)
    GT              reduce using rule 69 (char -> CHAR .)
    LT              reduce using rule 69 (char -> CHAR .)
    GTE             reduce using rule 69 (char -> CHAR .)
    LTE             reduce using rule 69 (char -> CHAR .)
    AND             reduce using rule 69 (char -> CHAR .)
    OR              reduce using rule 69 (char -> CHAR .)
    THEN            reduce using rule 69 (char -> CHAR .)
    SEMICOLON       reduce using rule 69 (char -> CHAR .)
    BEGIN           reduce using rule 69 (char -> CHAR .)
    WHILE           reduce using rule 69 (char -> CHAR .)
    IF              reduce using rule 69 (char -> CHAR .)
    IDENTIFIER      reduce using rule 69 (char -> CHAR .)
    END             reduce using rule 69 (char -> CHAR .)
    FUNCTION        reduce using rule 69 (char -> CHAR .)
    ELSE            reduce using rule 69 (char -> CHAR .)
    RPARENARR       reduce using rule 69 (char -> CHAR .)


state 83

    (68) string -> STRING .

    DO              reduce using rule 68 (string -> STRING .)
    PLUS            reduce using rule 68 (string -> STRING .)
    MINUS           reduce using rule 68 (string -> STRING .)
    EQ              reduce using rule 68 (string -> STRING .)
    NEQ             reduce using rule 68 (string -> STRING .)
    GT              reduce using rule 68 (string -> STRING .)
    LT              reduce using rule 68 (string -> STRING .)
    GTE             reduce using rule 68 (string -> STRING .)
    LTE             reduce using rule 68 (string -> STRING .)
    AND             reduce using rule 68 (string -> STRING .)
    OR              reduce using rule 68 (string -> STRING .)
    THEN            reduce using rule 68 (string -> STRING .)
    SEMICOLON       reduce using rule 68 (string -> STRING .)
    BEGIN           reduce using rule 68 (string -> STRING .)
    WHILE           reduce using rule 68 (string -> STRING .)
    IF              reduce using rule 68 (string -> STRING .)
    IDENTIFIER      reduce using rule 68 (string -> STRING .)
    END             reduce using rule 68 (string -> STRING .)
    FUNCTION        reduce using rule 68 (string -> STRING .)
    ELSE            reduce using rule 68 (string -> STRING .)
    RPARENARR       reduce using rule 68 (string -> STRING .)


state 84

    (40) if_else_statement -> IF expression . THEN then_statement
    (41) if_else_statement -> IF expression . THEN else_statement ELSE then_statement
    (48) expression -> expression . sign term
    (49) expression -> expression . and_or expression
    (52) sign -> . PLUS
    (53) sign -> . MINUS
    (54) sign -> . EQ
    (55) sign -> . NEQ
    (56) sign -> . GT
    (57) sign -> . LT
    (58) sign -> . GTE
    (59) sign -> . LTE
    (50) and_or -> . AND
    (51) and_or -> . OR

    THEN            shift and go to state 113
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    EQ              shift and go to state 104
    NEQ             shift and go to state 105
    GT              shift and go to state 106
    LT              shift and go to state 107
    GTE             shift and go to state 108
    LTE             shift and go to state 109
    AND             shift and go to state 110
    OR              shift and go to state 111

    sign                           shift and go to state 100
    and_or                         shift and go to state 101

state 85

    (5) block -> declaration_part statement_part .

    BEGIN           reduce using rule 5 (block -> declaration_part statement_part .)
    WHILE           reduce using rule 5 (block -> declaration_part statement_part .)
    IF              reduce using rule 5 (block -> declaration_part statement_part .)
    IDENTIFIER      reduce using rule 5 (block -> declaration_part statement_part .)
    FUNCTION        reduce using rule 5 (block -> declaration_part statement_part .)


state 86

    (4) declaration_part -> type_definition_part variable_declaration_part . function_declaration_part
    (12) function_declaration_part -> . function_declaration function_declaration_part
    (13) function_declaration_part -> . empty
    (14) function_declaration -> . function_heading SEMICOLON block
    (1) empty -> .
    (15) function_heading -> . FUNCTION identifier LPAREN parameters RPAREN COLON simple_type_name

  ! shift/reduce conflict for FUNCTION resolved as shift
    BEGIN           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    IDENTIFIER      reduce using rule 1 (empty -> .)
    FUNCTION        shift and go to state 20

  ! FUNCTION        [ reduce using rule 1 (empty -> .) ]

    function_declaration_part      shift and go to state 114
    function_declaration           shift and go to state 17
    empty                          shift and go to state 18
    function_heading               shift and go to state 19

state 87

    (18) names_list -> identifier .
    (19) names_list -> identifier . COMMA names_list

    COLON           reduce using rule 18 (names_list -> identifier .)
    COMMA           shift and go to state 115


state 88

    (15) function_heading -> FUNCTION identifier LPAREN parameters . RPAREN COLON simple_type_name

    RPAREN          shift and go to state 116


state 89

    (16) parameters -> names_list . COLON simple_type_name
    (17) parameters -> names_list . COLON simple_type_name SEMICOLON parameters

    COLON           shift and go to state 117


state 90

    (73) variable_declaration -> identifier_list COLON simple_type_name SEMICOLON .

    IDENTIFIER      reduce using rule 73 (variable_declaration -> identifier_list COLON simple_type_name SEMICOLON .)
    FUNCTION        reduce using rule 73 (variable_declaration -> identifier_list COLON simple_type_name SEMICOLON .)
    BEGIN           reduce using rule 73 (variable_declaration -> identifier_list COLON simple_type_name SEMICOLON .)
    WHILE           reduce using rule 73 (variable_declaration -> identifier_list COLON simple_type_name SEMICOLON .)
    IF              reduce using rule 73 (variable_declaration -> identifier_list COLON simple_type_name SEMICOLON .)


state 91

    (75) variable_declaration -> identifier COLON identifier SEMICOLON .

    IDENTIFIER      reduce using rule 75 (variable_declaration -> identifier COLON identifier SEMICOLON .)
    FUNCTION        reduce using rule 75 (variable_declaration -> identifier COLON identifier SEMICOLON .)
    BEGIN           reduce using rule 75 (variable_declaration -> identifier COLON identifier SEMICOLON .)
    WHILE           reduce using rule 75 (variable_declaration -> identifier COLON identifier SEMICOLON .)
    IF              reduce using rule 75 (variable_declaration -> identifier COLON identifier SEMICOLON .)


state 92

    (74) variable_declaration -> identifier COLON simple_type_name SEMICOLON .

    IDENTIFIER      reduce using rule 74 (variable_declaration -> identifier COLON simple_type_name SEMICOLON .)
    FUNCTION        reduce using rule 74 (variable_declaration -> identifier COLON simple_type_name SEMICOLON .)
    BEGIN           reduce using rule 74 (variable_declaration -> identifier COLON simple_type_name SEMICOLON .)
    WHILE           reduce using rule 74 (variable_declaration -> identifier COLON simple_type_name SEMICOLON .)
    IF              reduce using rule 74 (variable_declaration -> identifier COLON simple_type_name SEMICOLON .)


state 93

    (76) variable_declaration -> identifier COLON ARRAY LPARENARR . INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON

    INTEGER         shift and go to state 118


state 94

    (20) type_definition -> identifier EQ ARRAY LPARENARR INTEGER . DD INTEGER RPARENARR OF simple_type_name SEMICOLON

    DD              shift and go to state 119


state 95

    (42) compound_statement -> BEGIN statement_part END . SEMICOLON

    SEMICOLON       shift and go to state 120


state 96

    (43) compound_statement_dot -> BEGIN statement_part END DOT .

    $end            reduce using rule 43 (compound_statement_dot -> BEGIN statement_part END DOT .)


state 97

    (45) assignment -> identifier ASSIGNMENT expression . ending
    (48) expression -> expression . sign term
    (49) expression -> expression . and_or expression
    (34) ending -> . SEMICOLON
    (35) ending -> . empty
    (52) sign -> . PLUS
    (53) sign -> . MINUS
    (54) sign -> . EQ
    (55) sign -> . NEQ
    (56) sign -> . GT
    (57) sign -> . LT
    (58) sign -> . GTE
    (59) sign -> . LTE
    (50) and_or -> . AND
    (51) and_or -> . OR
    (1) empty -> .

    SEMICOLON       shift and go to state 122
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    EQ              shift and go to state 104
    NEQ             shift and go to state 105
    GT              shift and go to state 106
    LT              shift and go to state 107
    GTE             shift and go to state 108
    LTE             shift and go to state 109
    AND             shift and go to state 110
    OR              shift and go to state 111
    BEGIN           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    IDENTIFIER      reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    FUNCTION        reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

    ending                         shift and go to state 121
    sign                           shift and go to state 100
    and_or                         shift and go to state 101
    empty                          shift and go to state 123

state 98

    (46) assignment -> identifier LPARENARR term . RPARENARR ASSIGNMENT expression ending

    RPARENARR       shift and go to state 124


state 99

    (32) while_statement -> WHILE expression DO . single_statement_part
    (33) while_statement -> WHILE expression DO . BEGIN statement_part END SEMICOLON
    (28) single_statement_part -> . assignment
    (29) single_statement_part -> . while_statement
    (30) single_statement_part -> . if_else_statement
    (31) single_statement_part -> . empty
    (45) assignment -> . identifier ASSIGNMENT expression ending
    (46) assignment -> . identifier LPARENARR term RPARENARR ASSIGNMENT expression ending
    (32) while_statement -> . WHILE expression DO single_statement_part
    (33) while_statement -> . WHILE expression DO BEGIN statement_part END SEMICOLON
    (40) if_else_statement -> . IF expression THEN then_statement
    (41) if_else_statement -> . IF expression THEN else_statement ELSE then_statement
    (1) empty -> .
    (83) identifier -> . IDENTIFIER

  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    BEGIN           shift and go to state 126
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    END             reduce using rule 1 (empty -> .)
    FUNCTION        reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    IDENTIFIER      shift and go to state 8

  ! BEGIN           [ reduce using rule 1 (empty -> .) ]
  ! WHILE           [ reduce using rule 1 (empty -> .) ]
  ! IF              [ reduce using rule 1 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 1 (empty -> .) ]

    single_statement_part          shift and go to state 125
    assignment                     shift and go to state 127
    while_statement                shift and go to state 128
    if_else_statement              shift and go to state 129
    empty                          shift and go to state 130
    identifier                     shift and go to state 47

state 100

    (48) expression -> expression sign . term
    (60) term -> . integer
    (61) term -> . real
    (62) term -> . char
    (63) term -> . string
    (64) term -> . function_call
    (65) term -> . identifier
    (66) integer -> . INTEGER
    (67) real -> . REAL
    (69) char -> . CHAR
    (68) string -> . STRING
    (70) function_call -> . identifier LPAREN identifier_list RPAREN
    (83) identifier -> . IDENTIFIER

    INTEGER         shift and go to state 80
    REAL            shift and go to state 81
    CHAR            shift and go to state 82
    STRING          shift and go to state 83
    IDENTIFIER      shift and go to state 8

    term                           shift and go to state 131
    integer                        shift and go to state 74
    real                           shift and go to state 75
    char                           shift and go to state 76
    string                         shift and go to state 77
    function_call                  shift and go to state 78
    identifier                     shift and go to state 79

state 101

    (49) expression -> expression and_or . expression
    (47) expression -> . term
    (48) expression -> . expression sign term
    (49) expression -> . expression and_or expression
    (60) term -> . integer
    (61) term -> . real
    (62) term -> . char
    (63) term -> . string
    (64) term -> . function_call
    (65) term -> . identifier
    (66) integer -> . INTEGER
    (67) real -> . REAL
    (69) char -> . CHAR
    (68) string -> . STRING
    (70) function_call -> . identifier LPAREN identifier_list RPAREN
    (83) identifier -> . IDENTIFIER

    INTEGER         shift and go to state 80
    REAL            shift and go to state 81
    CHAR            shift and go to state 82
    STRING          shift and go to state 83
    IDENTIFIER      shift and go to state 8

    expression                     shift and go to state 132
    term                           shift and go to state 73
    integer                        shift and go to state 74
    real                           shift and go to state 75
    char                           shift and go to state 76
    string                         shift and go to state 77
    function_call                  shift and go to state 78
    identifier                     shift and go to state 79

state 102

    (52) sign -> PLUS .

    INTEGER         reduce using rule 52 (sign -> PLUS .)
    REAL            reduce using rule 52 (sign -> PLUS .)
    CHAR            reduce using rule 52 (sign -> PLUS .)
    STRING          reduce using rule 52 (sign -> PLUS .)
    IDENTIFIER      reduce using rule 52 (sign -> PLUS .)


state 103

    (53) sign -> MINUS .

    INTEGER         reduce using rule 53 (sign -> MINUS .)
    REAL            reduce using rule 53 (sign -> MINUS .)
    CHAR            reduce using rule 53 (sign -> MINUS .)
    STRING          reduce using rule 53 (sign -> MINUS .)
    IDENTIFIER      reduce using rule 53 (sign -> MINUS .)


state 104

    (54) sign -> EQ .

    INTEGER         reduce using rule 54 (sign -> EQ .)
    REAL            reduce using rule 54 (sign -> EQ .)
    CHAR            reduce using rule 54 (sign -> EQ .)
    STRING          reduce using rule 54 (sign -> EQ .)
    IDENTIFIER      reduce using rule 54 (sign -> EQ .)


state 105

    (55) sign -> NEQ .

    INTEGER         reduce using rule 55 (sign -> NEQ .)
    REAL            reduce using rule 55 (sign -> NEQ .)
    CHAR            reduce using rule 55 (sign -> NEQ .)
    STRING          reduce using rule 55 (sign -> NEQ .)
    IDENTIFIER      reduce using rule 55 (sign -> NEQ .)


state 106

    (56) sign -> GT .

    INTEGER         reduce using rule 56 (sign -> GT .)
    REAL            reduce using rule 56 (sign -> GT .)
    CHAR            reduce using rule 56 (sign -> GT .)
    STRING          reduce using rule 56 (sign -> GT .)
    IDENTIFIER      reduce using rule 56 (sign -> GT .)


state 107

    (57) sign -> LT .

    INTEGER         reduce using rule 57 (sign -> LT .)
    REAL            reduce using rule 57 (sign -> LT .)
    CHAR            reduce using rule 57 (sign -> LT .)
    STRING          reduce using rule 57 (sign -> LT .)
    IDENTIFIER      reduce using rule 57 (sign -> LT .)


state 108

    (58) sign -> GTE .

    INTEGER         reduce using rule 58 (sign -> GTE .)
    REAL            reduce using rule 58 (sign -> GTE .)
    CHAR            reduce using rule 58 (sign -> GTE .)
    STRING          reduce using rule 58 (sign -> GTE .)
    IDENTIFIER      reduce using rule 58 (sign -> GTE .)


state 109

    (59) sign -> LTE .

    INTEGER         reduce using rule 59 (sign -> LTE .)
    REAL            reduce using rule 59 (sign -> LTE .)
    CHAR            reduce using rule 59 (sign -> LTE .)
    STRING          reduce using rule 59 (sign -> LTE .)
    IDENTIFIER      reduce using rule 59 (sign -> LTE .)


state 110

    (50) and_or -> AND .

    INTEGER         reduce using rule 50 (and_or -> AND .)
    REAL            reduce using rule 50 (and_or -> AND .)
    CHAR            reduce using rule 50 (and_or -> AND .)
    STRING          reduce using rule 50 (and_or -> AND .)
    IDENTIFIER      reduce using rule 50 (and_or -> AND .)


state 111

    (51) and_or -> OR .

    INTEGER         reduce using rule 51 (and_or -> OR .)
    REAL            reduce using rule 51 (and_or -> OR .)
    CHAR            reduce using rule 51 (and_or -> OR .)
    STRING          reduce using rule 51 (and_or -> OR .)
    IDENTIFIER      reduce using rule 51 (and_or -> OR .)


state 112

    (70) function_call -> identifier LPAREN . identifier_list RPAREN
    (77) identifier_list -> . identifier COMMA identifier_list
    (78) identifier_list -> . identifier
    (83) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8

    identifier                     shift and go to state 62
    identifier_list                shift and go to state 133

state 113

    (40) if_else_statement -> IF expression THEN . then_statement
    (41) if_else_statement -> IF expression THEN . else_statement ELSE then_statement
    (36) then_statement -> . single_statement_part
    (37) then_statement -> . BEGIN statement_part END SEMICOLON
    (38) else_statement -> . single_statement_part
    (39) else_statement -> . BEGIN statement_part END
    (28) single_statement_part -> . assignment
    (29) single_statement_part -> . while_statement
    (30) single_statement_part -> . if_else_statement
    (31) single_statement_part -> . empty
    (45) assignment -> . identifier ASSIGNMENT expression ending
    (46) assignment -> . identifier LPARENARR term RPARENARR ASSIGNMENT expression ending
    (32) while_statement -> . WHILE expression DO single_statement_part
    (33) while_statement -> . WHILE expression DO BEGIN statement_part END SEMICOLON
    (40) if_else_statement -> . IF expression THEN then_statement
    (41) if_else_statement -> . IF expression THEN else_statement ELSE then_statement
    (1) empty -> .
    (83) identifier -> . IDENTIFIER

  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    BEGIN           shift and go to state 137
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    END             reduce using rule 1 (empty -> .)
    FUNCTION        reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    IDENTIFIER      shift and go to state 8

  ! BEGIN           [ reduce using rule 1 (empty -> .) ]
  ! WHILE           [ reduce using rule 1 (empty -> .) ]
  ! IF              [ reduce using rule 1 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 1 (empty -> .) ]

    then_statement                 shift and go to state 134
    else_statement                 shift and go to state 135
    single_statement_part          shift and go to state 136
    assignment                     shift and go to state 127
    while_statement                shift and go to state 128
    if_else_statement              shift and go to state 129
    empty                          shift and go to state 130
    identifier                     shift and go to state 47

state 114

    (4) declaration_part -> type_definition_part variable_declaration_part function_declaration_part .

    BEGIN           reduce using rule 4 (declaration_part -> type_definition_part variable_declaration_part function_declaration_part .)
    WHILE           reduce using rule 4 (declaration_part -> type_definition_part variable_declaration_part function_declaration_part .)
    IF              reduce using rule 4 (declaration_part -> type_definition_part variable_declaration_part function_declaration_part .)
    IDENTIFIER      reduce using rule 4 (declaration_part -> type_definition_part variable_declaration_part function_declaration_part .)
    FUNCTION        reduce using rule 4 (declaration_part -> type_definition_part variable_declaration_part function_declaration_part .)


state 115

    (19) names_list -> identifier COMMA . names_list
    (18) names_list -> . identifier
    (19) names_list -> . identifier COMMA names_list
    (83) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8

    identifier                     shift and go to state 87
    names_list                     shift and go to state 138

state 116

    (15) function_heading -> FUNCTION identifier LPAREN parameters RPAREN . COLON simple_type_name

    COLON           shift and go to state 139


state 117

    (16) parameters -> names_list COLON . simple_type_name
    (17) parameters -> names_list COLON . simple_type_name SEMICOLON parameters
    (79) simple_type_name -> . SSTRING
    (80) simple_type_name -> . SCHAR
    (81) simple_type_name -> . SREAL
    (82) simple_type_name -> . SINTEGER

    SSTRING         shift and go to state 55
    SCHAR           shift and go to state 56
    SREAL           shift and go to state 57
    SINTEGER        shift and go to state 58

    simple_type_name               shift and go to state 140

state 118

    (76) variable_declaration -> identifier COLON ARRAY LPARENARR INTEGER . DD INTEGER RPARENARR OF simple_type_name SEMICOLON

    DD              shift and go to state 141


state 119

    (20) type_definition -> identifier EQ ARRAY LPARENARR INTEGER DD . INTEGER RPARENARR OF simple_type_name SEMICOLON

    INTEGER         shift and go to state 142


state 120

    (42) compound_statement -> BEGIN statement_part END SEMICOLON .

    END             reduce using rule 42 (compound_statement -> BEGIN statement_part END SEMICOLON .)
    BEGIN           reduce using rule 42 (compound_statement -> BEGIN statement_part END SEMICOLON .)
    WHILE           reduce using rule 42 (compound_statement -> BEGIN statement_part END SEMICOLON .)
    IF              reduce using rule 42 (compound_statement -> BEGIN statement_part END SEMICOLON .)
    IDENTIFIER      reduce using rule 42 (compound_statement -> BEGIN statement_part END SEMICOLON .)
    FUNCTION        reduce using rule 42 (compound_statement -> BEGIN statement_part END SEMICOLON .)


state 121

    (45) assignment -> identifier ASSIGNMENT expression ending .

    BEGIN           reduce using rule 45 (assignment -> identifier ASSIGNMENT expression ending .)
    WHILE           reduce using rule 45 (assignment -> identifier ASSIGNMENT expression ending .)
    IF              reduce using rule 45 (assignment -> identifier ASSIGNMENT expression ending .)
    IDENTIFIER      reduce using rule 45 (assignment -> identifier ASSIGNMENT expression ending .)
    END             reduce using rule 45 (assignment -> identifier ASSIGNMENT expression ending .)
    FUNCTION        reduce using rule 45 (assignment -> identifier ASSIGNMENT expression ending .)
    ELSE            reduce using rule 45 (assignment -> identifier ASSIGNMENT expression ending .)


state 122

    (34) ending -> SEMICOLON .

    BEGIN           reduce using rule 34 (ending -> SEMICOLON .)
    WHILE           reduce using rule 34 (ending -> SEMICOLON .)
    IF              reduce using rule 34 (ending -> SEMICOLON .)
    IDENTIFIER      reduce using rule 34 (ending -> SEMICOLON .)
    END             reduce using rule 34 (ending -> SEMICOLON .)
    FUNCTION        reduce using rule 34 (ending -> SEMICOLON .)
    ELSE            reduce using rule 34 (ending -> SEMICOLON .)


state 123

    (35) ending -> empty .

    BEGIN           reduce using rule 35 (ending -> empty .)
    WHILE           reduce using rule 35 (ending -> empty .)
    IF              reduce using rule 35 (ending -> empty .)
    IDENTIFIER      reduce using rule 35 (ending -> empty .)
    END             reduce using rule 35 (ending -> empty .)
    FUNCTION        reduce using rule 35 (ending -> empty .)
    ELSE            reduce using rule 35 (ending -> empty .)


state 124

    (46) assignment -> identifier LPARENARR term RPARENARR . ASSIGNMENT expression ending

    ASSIGNMENT      shift and go to state 143


state 125

    (32) while_statement -> WHILE expression DO single_statement_part .

    BEGIN           reduce using rule 32 (while_statement -> WHILE expression DO single_statement_part .)
    WHILE           reduce using rule 32 (while_statement -> WHILE expression DO single_statement_part .)
    IF              reduce using rule 32 (while_statement -> WHILE expression DO single_statement_part .)
    IDENTIFIER      reduce using rule 32 (while_statement -> WHILE expression DO single_statement_part .)
    END             reduce using rule 32 (while_statement -> WHILE expression DO single_statement_part .)
    FUNCTION        reduce using rule 32 (while_statement -> WHILE expression DO single_statement_part .)
    ELSE            reduce using rule 32 (while_statement -> WHILE expression DO single_statement_part .)


state 126

    (33) while_statement -> WHILE expression DO BEGIN . statement_part END SEMICOLON
    (21) statement_part -> . compound_statement
    (22) statement_part -> . assignment_list
    (23) statement_part -> . while_statement_list
    (24) statement_part -> . if_else_statement_list
    (25) statement_part -> . empty
    (42) compound_statement -> . BEGIN statement_part END SEMICOLON
    (44) assignment_list -> . assignment statement_part
    (26) while_statement_list -> . while_statement statement_part
    (27) if_else_statement_list -> . if_else_statement statement_part
    (1) empty -> .
    (45) assignment -> . identifier ASSIGNMENT expression ending
    (46) assignment -> . identifier LPARENARR term RPARENARR ASSIGNMENT expression ending
    (32) while_statement -> . WHILE expression DO single_statement_part
    (33) while_statement -> . WHILE expression DO BEGIN statement_part END SEMICOLON
    (40) if_else_statement -> . IF expression THEN then_statement
    (41) if_else_statement -> . IF expression THEN else_statement ELSE then_statement
    (83) identifier -> . IDENTIFIER

    BEGIN           shift and go to state 37
    END             reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    IDENTIFIER      shift and go to state 8

    statement_part                 shift and go to state 144
    compound_statement             shift and go to state 39
    assignment_list                shift and go to state 40
    while_statement_list           shift and go to state 41
    if_else_statement_list         shift and go to state 42
    empty                          shift and go to state 43
    assignment                     shift and go to state 44
    while_statement                shift and go to state 45
    if_else_statement              shift and go to state 46
    identifier                     shift and go to state 47

state 127

    (28) single_statement_part -> assignment .

    BEGIN           reduce using rule 28 (single_statement_part -> assignment .)
    WHILE           reduce using rule 28 (single_statement_part -> assignment .)
    IF              reduce using rule 28 (single_statement_part -> assignment .)
    IDENTIFIER      reduce using rule 28 (single_statement_part -> assignment .)
    END             reduce using rule 28 (single_statement_part -> assignment .)
    FUNCTION        reduce using rule 28 (single_statement_part -> assignment .)
    ELSE            reduce using rule 28 (single_statement_part -> assignment .)


state 128

    (29) single_statement_part -> while_statement .

    BEGIN           reduce using rule 29 (single_statement_part -> while_statement .)
    WHILE           reduce using rule 29 (single_statement_part -> while_statement .)
    IF              reduce using rule 29 (single_statement_part -> while_statement .)
    IDENTIFIER      reduce using rule 29 (single_statement_part -> while_statement .)
    END             reduce using rule 29 (single_statement_part -> while_statement .)
    FUNCTION        reduce using rule 29 (single_statement_part -> while_statement .)
    ELSE            reduce using rule 29 (single_statement_part -> while_statement .)


state 129

    (30) single_statement_part -> if_else_statement .

    BEGIN           reduce using rule 30 (single_statement_part -> if_else_statement .)
    WHILE           reduce using rule 30 (single_statement_part -> if_else_statement .)
    IF              reduce using rule 30 (single_statement_part -> if_else_statement .)
    IDENTIFIER      reduce using rule 30 (single_statement_part -> if_else_statement .)
    END             reduce using rule 30 (single_statement_part -> if_else_statement .)
    FUNCTION        reduce using rule 30 (single_statement_part -> if_else_statement .)
    ELSE            reduce using rule 30 (single_statement_part -> if_else_statement .)


state 130

    (31) single_statement_part -> empty .

    BEGIN           reduce using rule 31 (single_statement_part -> empty .)
    WHILE           reduce using rule 31 (single_statement_part -> empty .)
    IF              reduce using rule 31 (single_statement_part -> empty .)
    IDENTIFIER      reduce using rule 31 (single_statement_part -> empty .)
    END             reduce using rule 31 (single_statement_part -> empty .)
    FUNCTION        reduce using rule 31 (single_statement_part -> empty .)
    ELSE            reduce using rule 31 (single_statement_part -> empty .)


state 131

    (48) expression -> expression sign term .

    DO              reduce using rule 48 (expression -> expression sign term .)
    PLUS            reduce using rule 48 (expression -> expression sign term .)
    MINUS           reduce using rule 48 (expression -> expression sign term .)
    EQ              reduce using rule 48 (expression -> expression sign term .)
    NEQ             reduce using rule 48 (expression -> expression sign term .)
    GT              reduce using rule 48 (expression -> expression sign term .)
    LT              reduce using rule 48 (expression -> expression sign term .)
    GTE             reduce using rule 48 (expression -> expression sign term .)
    LTE             reduce using rule 48 (expression -> expression sign term .)
    AND             reduce using rule 48 (expression -> expression sign term .)
    OR              reduce using rule 48 (expression -> expression sign term .)
    THEN            reduce using rule 48 (expression -> expression sign term .)
    SEMICOLON       reduce using rule 48 (expression -> expression sign term .)
    BEGIN           reduce using rule 48 (expression -> expression sign term .)
    WHILE           reduce using rule 48 (expression -> expression sign term .)
    IF              reduce using rule 48 (expression -> expression sign term .)
    IDENTIFIER      reduce using rule 48 (expression -> expression sign term .)
    END             reduce using rule 48 (expression -> expression sign term .)
    FUNCTION        reduce using rule 48 (expression -> expression sign term .)
    ELSE            reduce using rule 48 (expression -> expression sign term .)


state 132

    (49) expression -> expression and_or expression .
    (48) expression -> expression . sign term
    (49) expression -> expression . and_or expression
    (52) sign -> . PLUS
    (53) sign -> . MINUS
    (54) sign -> . EQ
    (55) sign -> . NEQ
    (56) sign -> . GT
    (57) sign -> . LT
    (58) sign -> . GTE
    (59) sign -> . LTE
    (50) and_or -> . AND
    (51) and_or -> . OR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    DO              reduce using rule 49 (expression -> expression and_or expression .)
    THEN            reduce using rule 49 (expression -> expression and_or expression .)
    SEMICOLON       reduce using rule 49 (expression -> expression and_or expression .)
    BEGIN           reduce using rule 49 (expression -> expression and_or expression .)
    WHILE           reduce using rule 49 (expression -> expression and_or expression .)
    IF              reduce using rule 49 (expression -> expression and_or expression .)
    IDENTIFIER      reduce using rule 49 (expression -> expression and_or expression .)
    END             reduce using rule 49 (expression -> expression and_or expression .)
    FUNCTION        reduce using rule 49 (expression -> expression and_or expression .)
    ELSE            reduce using rule 49 (expression -> expression and_or expression .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    EQ              shift and go to state 104
    NEQ             shift and go to state 105
    GT              shift and go to state 106
    LT              shift and go to state 107
    GTE             shift and go to state 108
    LTE             shift and go to state 109
    AND             shift and go to state 110
    OR              shift and go to state 111

  ! PLUS            [ reduce using rule 49 (expression -> expression and_or expression .) ]
  ! MINUS           [ reduce using rule 49 (expression -> expression and_or expression .) ]
  ! EQ              [ reduce using rule 49 (expression -> expression and_or expression .) ]
  ! NEQ             [ reduce using rule 49 (expression -> expression and_or expression .) ]
  ! GT              [ reduce using rule 49 (expression -> expression and_or expression .) ]
  ! LT              [ reduce using rule 49 (expression -> expression and_or expression .) ]
  ! GTE             [ reduce using rule 49 (expression -> expression and_or expression .) ]
  ! LTE             [ reduce using rule 49 (expression -> expression and_or expression .) ]
  ! AND             [ reduce using rule 49 (expression -> expression and_or expression .) ]
  ! OR              [ reduce using rule 49 (expression -> expression and_or expression .) ]

    and_or                         shift and go to state 101
    sign                           shift and go to state 100

state 133

    (70) function_call -> identifier LPAREN identifier_list . RPAREN

    RPAREN          shift and go to state 145


state 134

    (40) if_else_statement -> IF expression THEN then_statement .

    BEGIN           reduce using rule 40 (if_else_statement -> IF expression THEN then_statement .)
    WHILE           reduce using rule 40 (if_else_statement -> IF expression THEN then_statement .)
    IF              reduce using rule 40 (if_else_statement -> IF expression THEN then_statement .)
    IDENTIFIER      reduce using rule 40 (if_else_statement -> IF expression THEN then_statement .)
    END             reduce using rule 40 (if_else_statement -> IF expression THEN then_statement .)
    FUNCTION        reduce using rule 40 (if_else_statement -> IF expression THEN then_statement .)
    ELSE            reduce using rule 40 (if_else_statement -> IF expression THEN then_statement .)


state 135

    (41) if_else_statement -> IF expression THEN else_statement . ELSE then_statement

    ELSE            shift and go to state 146


state 136

    (36) then_statement -> single_statement_part .
    (38) else_statement -> single_statement_part .

  ! reduce/reduce conflict for ELSE resolved using rule 36 (then_statement -> single_statement_part .)
    BEGIN           reduce using rule 36 (then_statement -> single_statement_part .)
    WHILE           reduce using rule 36 (then_statement -> single_statement_part .)
    IF              reduce using rule 36 (then_statement -> single_statement_part .)
    IDENTIFIER      reduce using rule 36 (then_statement -> single_statement_part .)
    END             reduce using rule 36 (then_statement -> single_statement_part .)
    FUNCTION        reduce using rule 36 (then_statement -> single_statement_part .)
    ELSE            reduce using rule 36 (then_statement -> single_statement_part .)

  ! ELSE            [ reduce using rule 38 (else_statement -> single_statement_part .) ]


state 137

    (37) then_statement -> BEGIN . statement_part END SEMICOLON
    (39) else_statement -> BEGIN . statement_part END
    (21) statement_part -> . compound_statement
    (22) statement_part -> . assignment_list
    (23) statement_part -> . while_statement_list
    (24) statement_part -> . if_else_statement_list
    (25) statement_part -> . empty
    (42) compound_statement -> . BEGIN statement_part END SEMICOLON
    (44) assignment_list -> . assignment statement_part
    (26) while_statement_list -> . while_statement statement_part
    (27) if_else_statement_list -> . if_else_statement statement_part
    (1) empty -> .
    (45) assignment -> . identifier ASSIGNMENT expression ending
    (46) assignment -> . identifier LPARENARR term RPARENARR ASSIGNMENT expression ending
    (32) while_statement -> . WHILE expression DO single_statement_part
    (33) while_statement -> . WHILE expression DO BEGIN statement_part END SEMICOLON
    (40) if_else_statement -> . IF expression THEN then_statement
    (41) if_else_statement -> . IF expression THEN else_statement ELSE then_statement
    (83) identifier -> . IDENTIFIER

    BEGIN           shift and go to state 37
    END             reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    IDENTIFIER      shift and go to state 8

    statement_part                 shift and go to state 147
    compound_statement             shift and go to state 39
    assignment_list                shift and go to state 40
    while_statement_list           shift and go to state 41
    if_else_statement_list         shift and go to state 42
    empty                          shift and go to state 43
    assignment                     shift and go to state 44
    while_statement                shift and go to state 45
    if_else_statement              shift and go to state 46
    identifier                     shift and go to state 47

state 138

    (19) names_list -> identifier COMMA names_list .

    COLON           reduce using rule 19 (names_list -> identifier COMMA names_list .)


state 139

    (15) function_heading -> FUNCTION identifier LPAREN parameters RPAREN COLON . simple_type_name
    (79) simple_type_name -> . SSTRING
    (80) simple_type_name -> . SCHAR
    (81) simple_type_name -> . SREAL
    (82) simple_type_name -> . SINTEGER

    SSTRING         shift and go to state 55
    SCHAR           shift and go to state 56
    SREAL           shift and go to state 57
    SINTEGER        shift and go to state 58

    simple_type_name               shift and go to state 148

state 140

    (16) parameters -> names_list COLON simple_type_name .
    (17) parameters -> names_list COLON simple_type_name . SEMICOLON parameters

    RPAREN          reduce using rule 16 (parameters -> names_list COLON simple_type_name .)
    SEMICOLON       shift and go to state 149


state 141

    (76) variable_declaration -> identifier COLON ARRAY LPARENARR INTEGER DD . INTEGER RPARENARR OF simple_type_name SEMICOLON

    INTEGER         shift and go to state 150


state 142

    (20) type_definition -> identifier EQ ARRAY LPARENARR INTEGER DD INTEGER . RPARENARR OF simple_type_name SEMICOLON

    RPARENARR       shift and go to state 151


state 143

    (46) assignment -> identifier LPARENARR term RPARENARR ASSIGNMENT . expression ending
    (47) expression -> . term
    (48) expression -> . expression sign term
    (49) expression -> . expression and_or expression
    (60) term -> . integer
    (61) term -> . real
    (62) term -> . char
    (63) term -> . string
    (64) term -> . function_call
    (65) term -> . identifier
    (66) integer -> . INTEGER
    (67) real -> . REAL
    (69) char -> . CHAR
    (68) string -> . STRING
    (70) function_call -> . identifier LPAREN identifier_list RPAREN
    (83) identifier -> . IDENTIFIER

    INTEGER         shift and go to state 80
    REAL            shift and go to state 81
    CHAR            shift and go to state 82
    STRING          shift and go to state 83
    IDENTIFIER      shift and go to state 8

    identifier                     shift and go to state 79
    term                           shift and go to state 73
    expression                     shift and go to state 152
    integer                        shift and go to state 74
    real                           shift and go to state 75
    char                           shift and go to state 76
    string                         shift and go to state 77
    function_call                  shift and go to state 78

state 144

    (33) while_statement -> WHILE expression DO BEGIN statement_part . END SEMICOLON

    END             shift and go to state 153


state 145

    (70) function_call -> identifier LPAREN identifier_list RPAREN .

    DO              reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)
    PLUS            reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)
    MINUS           reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)
    EQ              reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)
    NEQ             reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)
    GT              reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)
    LT              reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)
    GTE             reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)
    LTE             reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)
    AND             reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)
    OR              reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)
    THEN            reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)
    SEMICOLON       reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)
    BEGIN           reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)
    WHILE           reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)
    IF              reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)
    IDENTIFIER      reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)
    END             reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)
    FUNCTION        reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)
    ELSE            reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)
    RPARENARR       reduce using rule 70 (function_call -> identifier LPAREN identifier_list RPAREN .)


state 146

    (41) if_else_statement -> IF expression THEN else_statement ELSE . then_statement
    (36) then_statement -> . single_statement_part
    (37) then_statement -> . BEGIN statement_part END SEMICOLON
    (28) single_statement_part -> . assignment
    (29) single_statement_part -> . while_statement
    (30) single_statement_part -> . if_else_statement
    (31) single_statement_part -> . empty
    (45) assignment -> . identifier ASSIGNMENT expression ending
    (46) assignment -> . identifier LPARENARR term RPARENARR ASSIGNMENT expression ending
    (32) while_statement -> . WHILE expression DO single_statement_part
    (33) while_statement -> . WHILE expression DO BEGIN statement_part END SEMICOLON
    (40) if_else_statement -> . IF expression THEN then_statement
    (41) if_else_statement -> . IF expression THEN else_statement ELSE then_statement
    (1) empty -> .
    (83) identifier -> . IDENTIFIER

  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    BEGIN           shift and go to state 156
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    END             reduce using rule 1 (empty -> .)
    FUNCTION        reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)
    IDENTIFIER      shift and go to state 8

  ! BEGIN           [ reduce using rule 1 (empty -> .) ]
  ! WHILE           [ reduce using rule 1 (empty -> .) ]
  ! IF              [ reduce using rule 1 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 1 (empty -> .) ]

    then_statement                 shift and go to state 154
    single_statement_part          shift and go to state 155
    assignment                     shift and go to state 127
    while_statement                shift and go to state 128
    if_else_statement              shift and go to state 129
    empty                          shift and go to state 130
    identifier                     shift and go to state 47

state 147

    (37) then_statement -> BEGIN statement_part . END SEMICOLON
    (39) else_statement -> BEGIN statement_part . END

    END             shift and go to state 157


state 148

    (15) function_heading -> FUNCTION identifier LPAREN parameters RPAREN COLON simple_type_name .

    SEMICOLON       reduce using rule 15 (function_heading -> FUNCTION identifier LPAREN parameters RPAREN COLON simple_type_name .)


state 149

    (17) parameters -> names_list COLON simple_type_name SEMICOLON . parameters
    (16) parameters -> . names_list COLON simple_type_name
    (17) parameters -> . names_list COLON simple_type_name SEMICOLON parameters
    (18) names_list -> . identifier
    (19) names_list -> . identifier COMMA names_list
    (83) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8

    names_list                     shift and go to state 89
    parameters                     shift and go to state 158
    identifier                     shift and go to state 87

state 150

    (76) variable_declaration -> identifier COLON ARRAY LPARENARR INTEGER DD INTEGER . RPARENARR OF simple_type_name SEMICOLON

    RPARENARR       shift and go to state 159


state 151

    (20) type_definition -> identifier EQ ARRAY LPARENARR INTEGER DD INTEGER RPARENARR . OF simple_type_name SEMICOLON

    OF              shift and go to state 160


state 152

    (46) assignment -> identifier LPARENARR term RPARENARR ASSIGNMENT expression . ending
    (48) expression -> expression . sign term
    (49) expression -> expression . and_or expression
    (34) ending -> . SEMICOLON
    (35) ending -> . empty
    (52) sign -> . PLUS
    (53) sign -> . MINUS
    (54) sign -> . EQ
    (55) sign -> . NEQ
    (56) sign -> . GT
    (57) sign -> . LT
    (58) sign -> . GTE
    (59) sign -> . LTE
    (50) and_or -> . AND
    (51) and_or -> . OR
    (1) empty -> .

    SEMICOLON       shift and go to state 122
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    EQ              shift and go to state 104
    NEQ             shift and go to state 105
    GT              shift and go to state 106
    LT              shift and go to state 107
    GTE             shift and go to state 108
    LTE             shift and go to state 109
    AND             shift and go to state 110
    OR              shift and go to state 111
    BEGIN           reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    IDENTIFIER      reduce using rule 1 (empty -> .)
    END             reduce using rule 1 (empty -> .)
    FUNCTION        reduce using rule 1 (empty -> .)
    ELSE            reduce using rule 1 (empty -> .)

    ending                         shift and go to state 161
    sign                           shift and go to state 100
    and_or                         shift and go to state 101
    empty                          shift and go to state 123

state 153

    (33) while_statement -> WHILE expression DO BEGIN statement_part END . SEMICOLON

    SEMICOLON       shift and go to state 162


state 154

    (41) if_else_statement -> IF expression THEN else_statement ELSE then_statement .

    BEGIN           reduce using rule 41 (if_else_statement -> IF expression THEN else_statement ELSE then_statement .)
    WHILE           reduce using rule 41 (if_else_statement -> IF expression THEN else_statement ELSE then_statement .)
    IF              reduce using rule 41 (if_else_statement -> IF expression THEN else_statement ELSE then_statement .)
    IDENTIFIER      reduce using rule 41 (if_else_statement -> IF expression THEN else_statement ELSE then_statement .)
    END             reduce using rule 41 (if_else_statement -> IF expression THEN else_statement ELSE then_statement .)
    FUNCTION        reduce using rule 41 (if_else_statement -> IF expression THEN else_statement ELSE then_statement .)
    ELSE            reduce using rule 41 (if_else_statement -> IF expression THEN else_statement ELSE then_statement .)


state 155

    (36) then_statement -> single_statement_part .

    BEGIN           reduce using rule 36 (then_statement -> single_statement_part .)
    WHILE           reduce using rule 36 (then_statement -> single_statement_part .)
    IF              reduce using rule 36 (then_statement -> single_statement_part .)
    IDENTIFIER      reduce using rule 36 (then_statement -> single_statement_part .)
    END             reduce using rule 36 (then_statement -> single_statement_part .)
    FUNCTION        reduce using rule 36 (then_statement -> single_statement_part .)
    ELSE            reduce using rule 36 (then_statement -> single_statement_part .)


state 156

    (37) then_statement -> BEGIN . statement_part END SEMICOLON
    (21) statement_part -> . compound_statement
    (22) statement_part -> . assignment_list
    (23) statement_part -> . while_statement_list
    (24) statement_part -> . if_else_statement_list
    (25) statement_part -> . empty
    (42) compound_statement -> . BEGIN statement_part END SEMICOLON
    (44) assignment_list -> . assignment statement_part
    (26) while_statement_list -> . while_statement statement_part
    (27) if_else_statement_list -> . if_else_statement statement_part
    (1) empty -> .
    (45) assignment -> . identifier ASSIGNMENT expression ending
    (46) assignment -> . identifier LPARENARR term RPARENARR ASSIGNMENT expression ending
    (32) while_statement -> . WHILE expression DO single_statement_part
    (33) while_statement -> . WHILE expression DO BEGIN statement_part END SEMICOLON
    (40) if_else_statement -> . IF expression THEN then_statement
    (41) if_else_statement -> . IF expression THEN else_statement ELSE then_statement
    (83) identifier -> . IDENTIFIER

    BEGIN           shift and go to state 37
    END             reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 48
    IF              shift and go to state 49
    IDENTIFIER      shift and go to state 8

    statement_part                 shift and go to state 163
    compound_statement             shift and go to state 39
    assignment_list                shift and go to state 40
    while_statement_list           shift and go to state 41
    if_else_statement_list         shift and go to state 42
    empty                          shift and go to state 43
    assignment                     shift and go to state 44
    while_statement                shift and go to state 45
    if_else_statement              shift and go to state 46
    identifier                     shift and go to state 47

state 157

    (37) then_statement -> BEGIN statement_part END . SEMICOLON
    (39) else_statement -> BEGIN statement_part END .

    SEMICOLON       shift and go to state 164
    ELSE            reduce using rule 39 (else_statement -> BEGIN statement_part END .)


state 158

    (17) parameters -> names_list COLON simple_type_name SEMICOLON parameters .

    RPAREN          reduce using rule 17 (parameters -> names_list COLON simple_type_name SEMICOLON parameters .)


state 159

    (76) variable_declaration -> identifier COLON ARRAY LPARENARR INTEGER DD INTEGER RPARENARR . OF simple_type_name SEMICOLON

    OF              shift and go to state 165


state 160

    (20) type_definition -> identifier EQ ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF . simple_type_name SEMICOLON
    (79) simple_type_name -> . SSTRING
    (80) simple_type_name -> . SCHAR
    (81) simple_type_name -> . SREAL
    (82) simple_type_name -> . SINTEGER

    SSTRING         shift and go to state 55
    SCHAR           shift and go to state 56
    SREAL           shift and go to state 57
    SINTEGER        shift and go to state 58

    simple_type_name               shift and go to state 166

state 161

    (46) assignment -> identifier LPARENARR term RPARENARR ASSIGNMENT expression ending .

    BEGIN           reduce using rule 46 (assignment -> identifier LPARENARR term RPARENARR ASSIGNMENT expression ending .)
    WHILE           reduce using rule 46 (assignment -> identifier LPARENARR term RPARENARR ASSIGNMENT expression ending .)
    IF              reduce using rule 46 (assignment -> identifier LPARENARR term RPARENARR ASSIGNMENT expression ending .)
    IDENTIFIER      reduce using rule 46 (assignment -> identifier LPARENARR term RPARENARR ASSIGNMENT expression ending .)
    END             reduce using rule 46 (assignment -> identifier LPARENARR term RPARENARR ASSIGNMENT expression ending .)
    FUNCTION        reduce using rule 46 (assignment -> identifier LPARENARR term RPARENARR ASSIGNMENT expression ending .)
    ELSE            reduce using rule 46 (assignment -> identifier LPARENARR term RPARENARR ASSIGNMENT expression ending .)


state 162

    (33) while_statement -> WHILE expression DO BEGIN statement_part END SEMICOLON .

    BEGIN           reduce using rule 33 (while_statement -> WHILE expression DO BEGIN statement_part END SEMICOLON .)
    WHILE           reduce using rule 33 (while_statement -> WHILE expression DO BEGIN statement_part END SEMICOLON .)
    IF              reduce using rule 33 (while_statement -> WHILE expression DO BEGIN statement_part END SEMICOLON .)
    IDENTIFIER      reduce using rule 33 (while_statement -> WHILE expression DO BEGIN statement_part END SEMICOLON .)
    END             reduce using rule 33 (while_statement -> WHILE expression DO BEGIN statement_part END SEMICOLON .)
    FUNCTION        reduce using rule 33 (while_statement -> WHILE expression DO BEGIN statement_part END SEMICOLON .)
    ELSE            reduce using rule 33 (while_statement -> WHILE expression DO BEGIN statement_part END SEMICOLON .)


state 163

    (37) then_statement -> BEGIN statement_part . END SEMICOLON

    END             shift and go to state 167


state 164

    (37) then_statement -> BEGIN statement_part END SEMICOLON .

    BEGIN           reduce using rule 37 (then_statement -> BEGIN statement_part END SEMICOLON .)
    WHILE           reduce using rule 37 (then_statement -> BEGIN statement_part END SEMICOLON .)
    IF              reduce using rule 37 (then_statement -> BEGIN statement_part END SEMICOLON .)
    IDENTIFIER      reduce using rule 37 (then_statement -> BEGIN statement_part END SEMICOLON .)
    END             reduce using rule 37 (then_statement -> BEGIN statement_part END SEMICOLON .)
    FUNCTION        reduce using rule 37 (then_statement -> BEGIN statement_part END SEMICOLON .)
    ELSE            reduce using rule 37 (then_statement -> BEGIN statement_part END SEMICOLON .)


state 165

    (76) variable_declaration -> identifier COLON ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF . simple_type_name SEMICOLON
    (79) simple_type_name -> . SSTRING
    (80) simple_type_name -> . SCHAR
    (81) simple_type_name -> . SREAL
    (82) simple_type_name -> . SINTEGER

    SSTRING         shift and go to state 55
    SCHAR           shift and go to state 56
    SREAL           shift and go to state 57
    SINTEGER        shift and go to state 58

    simple_type_name               shift and go to state 168

state 166

    (20) type_definition -> identifier EQ ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name . SEMICOLON

    SEMICOLON       shift and go to state 169


state 167

    (37) then_statement -> BEGIN statement_part END . SEMICOLON

    SEMICOLON       shift and go to state 164


state 168

    (76) variable_declaration -> identifier COLON ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name . SEMICOLON

    SEMICOLON       shift and go to state 170


state 169

    (20) type_definition -> identifier EQ ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON .

    IDENTIFIER      reduce using rule 20 (type_definition -> identifier EQ ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON .)
    VAR             reduce using rule 20 (type_definition -> identifier EQ ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON .)
    FUNCTION        reduce using rule 20 (type_definition -> identifier EQ ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON .)
    BEGIN           reduce using rule 20 (type_definition -> identifier EQ ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON .)
    WHILE           reduce using rule 20 (type_definition -> identifier EQ ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON .)
    IF              reduce using rule 20 (type_definition -> identifier EQ ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON .)


state 170

    (76) variable_declaration -> identifier COLON ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON .

    IDENTIFIER      reduce using rule 76 (variable_declaration -> identifier COLON ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON .)
    FUNCTION        reduce using rule 76 (variable_declaration -> identifier COLON ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON .)
    BEGIN           reduce using rule 76 (variable_declaration -> identifier COLON ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON .)
    WHILE           reduce using rule 76 (variable_declaration -> identifier COLON ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON .)
    IF              reduce using rule 76 (variable_declaration -> identifier COLON ARRAY LPARENARR INTEGER DD INTEGER RPARENARR OF simple_type_name SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFIER in state 13 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 17 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 22 resolved as shift
WARNING: shift/reduce conflict for COLON in state 24 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 44 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 44 resolved as shift
WARNING: shift/reduce conflict for IF in state 44 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 44 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 45 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 45 resolved as shift
WARNING: shift/reduce conflict for IF in state 45 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 45 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 46 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 46 resolved as shift
WARNING: shift/reduce conflict for IF in state 46 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 46 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 51 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 51 resolved as shift
WARNING: shift/reduce conflict for IF in state 51 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 51 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 86 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 99 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 99 resolved as shift
WARNING: shift/reduce conflict for IF in state 99 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 99 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 113 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 113 resolved as shift
WARNING: shift/reduce conflict for IF in state 113 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 132 resolved as shift
WARNING: shift/reduce conflict for EQ in state 132 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 132 resolved as shift
WARNING: shift/reduce conflict for GT in state 132 resolved as shift
WARNING: shift/reduce conflict for LT in state 132 resolved as shift
WARNING: shift/reduce conflict for GTE in state 132 resolved as shift
WARNING: shift/reduce conflict for LTE in state 132 resolved as shift
WARNING: shift/reduce conflict for AND in state 132 resolved as shift
WARNING: shift/reduce conflict for OR in state 132 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 146 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 146 resolved as shift
WARNING: shift/reduce conflict for IF in state 146 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 146 resolved as shift
WARNING: reduce/reduce conflict in state 136 resolved using rule (then_statement -> single_statement_part)
WARNING: rejected rule (else_statement -> single_statement_part) in state 136
WARNING: Rule (else_statement -> single_statement_part) is never reduced
